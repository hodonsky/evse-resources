{
  "version": 3,
  "sources": ["../src/log.ts", "../src/index.ts", "../src/lib/Hardware/powermeter/index.ts", "../src/lib/Hardware/relay/index.ts", "../src/lib/Hardware/led/index.ts", "../package.json", "../src/lib/EVSE/index.ts", "../src/lib/Logger.ts", "../src/lib/EVSE/enums.ts", "../src/lib/Queue/interfaces.ts", "../src/lib/Queue/index.ts", "../src/lib/Queue/Database.ts", "../src/lib/EVSEConnector/enums.ts", "../src/lib/EventsObject.ts", "../src/lib/EVSEConnector/index.ts", "../src/lib/Transport/OCPPTransport.ts", "../src/lib/Transport/enums.ts", "../src/lib/Transport/Envelope.ts", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/rng.js", "../node_modules/uuid/dist/esm-node/native.js", "../node_modules/uuid/dist/esm-node/v4.js", "../src/lib/utils.ts", "../src/lib/Transport/FTPTransport.ts", "../src/lib/Transport/SFTPTransport.ts", "../src/lib/Hardware/index.ts"],
  "sourcesContent": ["\"use strict\"\n\nconst logLevel = 'log';\nconst emptyFn = () => {}\nswitch( logLevel ){\n  case 'error': console.warn = emptyFn\n  case 'warn' : console.debug = emptyFn\n  case 'debug': console.info = emptyFn\n  case 'info' : console.log = emptyFn\n  case 'log':\n  default: break;\n}", "\"use strict\"\nimport \"./log\"\nimport { readFileSync, writeFileSync }                from \"fs\"\n\nimport { ECurrentType }                               from \"./lib/Hardware/common/enums\"\nimport { PowerMeterModule }                           from \"./lib/Hardware/powermeter\"\nimport { IPowerMeterConfiguration }                   from \"./lib/Hardware/powermeter/interfaces\"\nimport { OverCurrentRelay, PowerRelay }               from \"./lib/Hardware/relay\"\nimport { ERelayType, ERelayPosition, ERelayContacts } from \"./lib/Hardware/relay/enums\"\nimport { TRelay }                                     from \"./lib/Hardware/relay/types\"\nimport { ESwitchType }                                from \"./lib/Hardware/switch/enums\"\nimport { TBLEModule }                                 from \"./lib/Hardware/communication/ble/types\"\nimport { TWiFiModule }                                from \"./lib/Hardware/communication/wifi/types\"\nimport {\n  RedLED, GreenLED, MultiColorLED, YellowLEDStrip,\n  RedLEDStrip, GreenLEDStrip, MultiColorLEDStrip\n} from \"./lib/Hardware/led\"\n\nimport { EVSE }                                       from \"./lib/EVSE\"\nimport { EVSEConnector }                              from \"./lib/EVSEConnector\"\nimport { EConnectorType, EChargingMode }              from \"./lib/EVSEConnector/enums\"\nimport { OCPPTransport, FTPTransport, SFTPTransport } from \"./lib/Transport\"\nimport {\n  ETransportType, EEvent,\n  EReconnectStrategy, EWebSocketProtocol\n} from \"./lib/Transport/enums\"\n\nimport { readDeviceTree } from \"./lib/Hardware\"\n\nconst deviceTree = readDeviceTree( \"/proc/device-tree\" );\nwriteFileSync( \"device-tree.json\", JSON.stringify( deviceTree, null, 2 ) );\n\n\ninterface ParseDeviceResponse {\n  PowerMeters: IPowerMeterConfiguration[],\n  Relays     : TRelay[],\n  WiFi      ?: TWiFiModule, \n  BLE       ?: TBLEModule\n}\n\nfunction parseDevices( devices ): ParseDeviceResponse {\n  return {\n    PowerMeters: [{\n      serialNumber    : \"230710280012\",\n      totalizer       : 0,\n      voltage         : 0,\n      deciWatts       : 0,\n      deciWattHours   : 0,\n      path            : \"\",\n      baudRate        : 9600,\n      activelyMetering: false\n    } as IPowerMeterConfiguration],\n    Relays:[{\n      serialNumber   : \"0A-FF-0B-CC-B2\",\n      type           : ERelayType.POWER,\n      switchType     : ESwitchType.SPST,\n      contacts       : [ ERelayContacts.NO, ERelayContacts.C, ERelayContacts.COIL_P, ERelayContacts.COIL_N ],\n      position       : ERelayPosition.OPEN,\n      coilVoltage    : 5,\n      coilCurrentType: ECurrentType.DC,\n      loadCurrent    : 240,\n      loadCurrentType: ECurrentType.AC,\n      loadVoltage    : 270\n    }]\n  }\n}\n\nconst\n  { PowerMeters, Relays } = parseDevices( deviceTree ),\n  connectorId = {\n    ZERO: Symbol(0),\n    ONE : Symbol(1),\n    TWO : Symbol(2)\n  },\n  ledId = {\n    ONE  : Symbol(1),\n    TWO  : Symbol(2),\n    THREE: Symbol(3),\n    FOUR : Symbol(4),\n    FIVE : Symbol(5),\n    SIX  : Symbol(6),\n    SEVEN: Symbol(7)\n  },\n  connectorName = [\"jane\", \"john\", \"jake\", \"bakery\", \"running\", \"jumping\", \"jerking\", \"jam\", \"jesup\", \"james\", \"sam\"],\n  connectorOpts = { chargingMode: EChargingMode.AC, maxCurrent: 32, maxVoltage: 120, cableLength: 100 },\n  serialNumber = \"1o1-2024-b1-00001\",\n  led = {\n    single: {\n      red       : new RedLED( ledId.ONE, \"Main\", \"Front & Top\" ),\n      green     : new GreenLED( ledId.TWO, \"Action\", \"Front & Top\"),\n      multicolor: new MultiColorLED( ledId.THREE, \"Status\"  )\n    },\n    strip: {\n      red       : new RedLEDStrip( ledId.FOUR, \"Main\", \"TOP\" ),\n      green     : new GreenLEDStrip( ledId.FIVE, \"Action\", \"TOP\"),\n      yellow    : new YellowLEDStrip( ledId.SEVEN, \"Warning\", \"Yellow Strip\" ),\n      multicolor: new MultiColorLEDStrip( ledId.SIX, \"Status\", \"Wraps edge\" )\n    }\n  },\n  powerMeter = {\n    ZERO: new PowerMeterModule(PowerMeters[0]),\n    ONE : new PowerMeterModule(PowerMeters[0]),\n    TWO : new PowerMeterModule(PowerMeters[0])\n  },\n  relay = {\n    ZERO : new OverCurrentRelay(Relays[0]),\n    ONE  : new PowerRelay(Relays[0]),\n    TWO  : new PowerRelay(Relays[0]),\n    THREE: new PowerRelay(Relays[0])\n  }\n\n\nnew EVSE({\n  id          : 0,\n  serialNumber,\n  connectors  : [\n    new EVSEConnector({\n      ...connectorOpts,\n      id           : connectorId.ONE,\n      connectorType: EConnectorType.TYPE1,\n      powerMeters  : [ powerMeter.ONE ],\n      relays       : {\n        power      : relay.ONE,\n        overCurrent: relay.ZERO\n      },\n      displayName: connectorName.pop()\n    }),\n    new EVSEConnector({\n      ...connectorOpts,\n      id           : connectorId.TWO,\n      connectorType: EConnectorType.CCS1,\n      powerMeters  : [ powerMeter.TWO ],\n      relays       : {\n        power      : relay.TWO,\n        overCurrent: relay.ZERO\n      },\n      displayName: connectorName.pop()\n    })\n  ],\n  os:{\n    logs: [{ name: \"TestLog\", path:\"/usr/src/app/src/test.log\" }]\n  },\n  hardwareModules: {\n    powerMeters: Object.values( powerMeter ),\n    connectorRelays: [ relay.TWO, relay.THREE ],\n    hmis:{\n      indicators   : {\n        power    : led.single.red.solid,\n        active   : led.single.red.solid,\n        preparing: led.single.red.blinkFast,\n        charging : led.single.red.blinkSlow,\n        error    : led.strip.red.blinkSlow,\n        faulted  : led.strip.red.solid,\n        updating : led.strip.yellow.blinkFast,\n        inactive : led.strip.red.blinkSlow\n      }\n    },\n    evseRelays              : [ relay.ONE ],\n    overloadProtectionRelays: [ relay.ZERO ],\n    communications          : {\n      serial: [],\n      wifi  : [],\n      rj45  : []\n    }\n  },\n  transport   : [\n    // new SFTPTransport({\n    //   host  : \"eu-central-1.sftpcloud.io\",\n    //   port  : 22,\n    //   user  : \"31df361ca3b64065aeca0b4ee9bcc638\",\n    //   pass  : \"cjQG3jqVMz2x3mF83DhCzuOwecyaXenj\"\n    // }),\n    new FTPTransport({\n      host: \"eu-central-1.sftpcloud.io\",\n      port: 21,\n      user: \"247d21666ad84822a3c104d218707806\",\n      pass: \"dV3Nl2HJR7revEy0OJhXLsbeSonBZ5Cv\"\n    }),\n    new OCPPTransport({\n      centralSystemService:{\n        type    : ETransportType.OCPP1_6J,\n        host    : \"steve\",\n        port    : 8180,\n        path    : `/steve/websocket/CentralSystemService/${serialNumber}`,\n        protocol: EWebSocketProtocol.WS,\n      },\n      events: Object.values( EEvent )\n    }),\n    // new OCPPTransport({\n    //   centralSystemService: {\n    //     type    : ETransportType.OCPP1_6J,\n    //     host    : process.env.OCPP_HOST,\n    //     port    : process.env.OCPP_PORT,\n    //     path    : `${process.env.OCPP_PATH}/${serialNumber}`,\n    //     protocol: process.env.PROTOCOL,\n    //     tls     : {\n    //       enabled: true,\n    //       cert   : [\n    //         readFileSync( \"/usr/local/share/ca-certificates/nginx.crt\", \"utf-8\" )\n    //       ]  \n    //     },\n    //     reconnect:{\n    //       strategy: EReconnectStrategy.LINEAR,\n    //       timeout : 1000,\n    //       attempts: 10\n    //     }\n    //   },\n    //   events: Object.values( EEvent )\n    // })\n  ]\n})", "\"use strict\";\n\nimport { watts, volts, celsius } from \"../common/types\"\nimport { TDisplay } from \"../display/types\"\nimport { TPowerMeter } from \"./types\"\nimport { IPowerMeterConfiguration } from \"./interfaces\"\nimport { TLED } from \"../led/types\"\n\nconst options = {\n  displays:[],\n  indicators:[],\n}\n\nexport class PowerMeterModule implements TPowerMeter {\n  serialNumber:string      = \"\"\n  totalizer:watts          = 0\n  voltage:volts            = 0\n  deciWatts:watts          = 0\n  deciWattHours:watts      = 0\n  activelyMetering:boolean = false\n  displays:TDisplay[]      = []\n  indicators:TLED[]        = []\n  meterPowerConsumption    = {\n    voltageLineConsumption: 0,\n    currentLineConsumption: 0,\n    voltageWorkRange      : 0\n  };\n  path                    : \"/dev/ttyUSB0\";\n  baudRate                : 9600;\n  constructor( configuration: IPowerMeterConfiguration ){\n    Object.entries( configuration).forEach( ( [ key, val ] ) => this[ key ] = val )\n  }\n}\n\nexport default PowerMeterModule", "\"use strict\"\n\nimport { ECurrentType } from \"../common/enums\"\nimport { ESwitchType } from \"../switch/enums\"\nimport { ERelayContacts, ERelayPosition, ERelayType } from \"./enums\"\nimport { IRelay, IRelayConfiguration } from \"./interfaces\"\n\nexport class Relay implements IRelay {\n  serialNumber   : string | number | symbol;\n  type           : ERelayType;\n  switchType     : ESwitchType;\n  contacts       : ERelayContacts[] = [];\n  position       : ERelayPosition;\n  coilVoltage    : number;\n  coilCurrentType: ECurrentType;\n  loadCurrent    : number;\n  loadCurrentType: ECurrentType;\n  loadVoltage    : number;\n  constructor( configuration: IRelayConfiguration ){\n    Object.entries( configuration ).forEach( ([key,value]) => this[key]=value)\n  }\n}\n\nexport class PowerRelay extends Relay {\n  type: ERelayType = ERelayType.POWER\n  constructor( configuration: Omit<IRelayConfiguration, \"type\" >){\n    super(configuration)\n  }\n}\nexport class OverCurrentRelay extends Relay {\n  type: ERelayType = ERelayType.OVERLOAD_PROTECTION\n  constructor( configuration: Omit<IRelayConfiguration, \"type\" >){\n    super(configuration)\n  }\n}", "\"use strict\"\n\nimport { TLED, TLEDStrip } from \"./types\"\nimport { ELEDPattern } from \"./enums\"\nimport { EColor } from \"../common/enums\"\n\nfunction ColoredLED( color, resistance, pins = 2 ){\n  return function ( constructor ){\n    (constructor as any).setColor( color )\n    (constructor as any).resistance = resistance\n    (constructor as any).pins = pins\n  }\n}\n\nexport class LED implements TLED{\n  id;\n  name;\n  description;\n  pins = 2;\n  resistance = 0;\n  #color;\n  #pattern:ELEDPattern = ELEDPattern.SOLID;\n  #active:boolean      = false;\n  constructor( id, name?, description? ) {\n    this.id = id\n    this.name = name || \"\"\n    this.description = description || \"\"\n  }\n  setColor( color: EColor ): void{\n    this.#color = color\n  }\n  isActive(): boolean{\n    return this.#active\n  }\n  get solid(): TLED {\n    return ( this.#pattern = ELEDPattern.SOLID, this )\n  }\n  get blinkSlow(): TLED {\n    return ( this.#pattern = ELEDPattern.BLINK_SLOW, this )\n  }\n  get blinkFast(): TLED {\n    return ( this.#pattern = ELEDPattern.BLINK_FAST, this )\n  }\n  on(): void{\n    this.#active = true\n  }\n  off(): void{\n    this.#active = false\n  }\n}\n\n@ColoredLED( EColor.RED, 1.8 )\nexport class RedLED    extends LED implements TLED {}\n@ColoredLED( EColor.GREEN, 2.5 )\nexport class GreenLED  extends LED implements TLED {}\n@ColoredLED( EColor.BLUE, 3.5 )\nexport class BlueLED   extends LED implements TLED {}\n@ColoredLED( EColor.PURPLE, 3 )\nexport class PurpleLED extends LED implements TLED {}\n@ColoredLED( EColor.WHITE, 3.8, 3 )\nexport class WhiteLED  extends LED implements TLED {}\n\n@ColoredLED( EColor.MULTI, 4, 3 )\n\nexport class MultiColorLED extends LED implements LED {\n  get red()   : TLED { return ( this.setColor( EColor.RED )   , this ) }\n  get blue()  : TLED { return ( this.setColor( EColor.BLUE )  , this ) }\n  get green() : TLED { return ( this.setColor( EColor.GREEN ) , this ) }\n  get yellow(): TLED { return ( this.setColor( EColor.YELLOW ), this ) }\n}\n\n\nfunction ColoredLEDStrip( color, resistance, pins = 4 ){\n  return function ( constructor ){\n    (constructor as any).color = color\n    (constructor as any).resistance = resistance\n    (constructor as any).pins = pins\n  }\n}\nexport class LEDStrip extends LED implements TLED {\n  pins = 4;\n}\n\n@ColoredLEDStrip( EColor.RED, 4 )\nexport class RedLEDStrip        extends LEDStrip      implements TLEDStrip {}\n@ColoredLEDStrip( EColor.GREEN, 4 )\nexport class GreenLEDStrip      extends LEDStrip      implements TLEDStrip {}\n@ColoredLEDStrip( EColor.YELLOW, 4 )\nexport class YellowLEDStrip      extends LEDStrip     implements TLEDStrip {}\n@ColoredLEDStrip( EColor.MULTI, 4 )\nexport class MultiColorLEDStrip extends MultiColorLED implements TLEDStrip {}", "{\n  \"name\"       : \"life.ho2.pilot-charger\",\n  \"version\"    : \"1.0.0\",\n  \"description\": \"HO2 LIFE - Pilot Charger\",\n  \"author\"     : \"eric@ho2.life\",\n  \"license\"    : \"ISC\",\n  \"scripts\": {\n    \"test\"        : \"mocha --exit --require ./node_modules/babel-core/register\",\n    \"build-legacy\": \"npx babel --config-file ./babel.json --out-dir ./build --source-maps --verbose --extensions '.js,.ts' ./src\",\n    \"prebuild\"    : \"rm -rf ./dist\",\n    \"build\"       : \"esbuild ./src/index.ts --bundle --outfile=dist/bundle.js --platform=node --sourcemap\",\n    \"prestart\"    : \"npm run build && npx pm2 flush\",\n    \"start\"       : \"npx pm2 start --time --no-daemon ./dist/bundle.js -i 1\"\n  },\n  \"engines\": {\n    \"node\": \">=22.9.0\",\n    \"npm\" : \">=10.8.3\"\n  },\n  \"dependencies\": {\n    \"uuid\": \"^10.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\" : \"^7.24.8\",\n    \"@babel/core\": \"^7.25.2\",\n    \"@babel/eslint-parser\": \"^7.25.1\",\n    \"@babel/plugin-proposal-do-expressions\": \"^7.24.7\",\n    \"@babel/plugin-proposal-export-default-from\": \"^7.24.7\",\n    \"@babel/plugin-proposal-function-bind\": \"^7.24.7\",\n    \"@babel/plugin-proposal-partial-application\": \"^7.24.7\",\n    \"@babel/plugin-proposal-pipeline-operator\": \"^7.24.7\",\n    \"@babel/plugin-proposal-throw-expressions\": \"^7.24.7\",\n    \"@babel/plugin-transform-class-properties\": \"^7.25.4\",\n    \"@babel/plugin-transform-export-namespace-from\": \"^7.24.7\",\n    \"@babel/plugin-transform-nullish-coalescing-operator\": \"^7.24.7\",\n    \"@babel/plugin-transform-object-rest-spread\": \"^7.24.7\",\n    \"@babel/plugin-transform-optional-chaining\": \"^7.24.8\",\n    \"@babel/plugin-transform-private-methods\": \"^7.25.4\",\n    \"@babel/plugin-transform-runtime\": \"^7.25.4\",\n    \"@babel/plugin-transform-typescript\": \"^7.25.7\",\n    \"@babel/preset-env\": \"^7.26.0\",\n    \"@babel/preset-typescript\": \"^7.26.0\",\n    \"@babel/register\": \"^7.24.6\",\n    \"@types/node\": \"^22.10.0\",\n    \"babel-loader\": \"^9.1.3\",\n    \"babel-plugin-module-resolver\": \"^5.0.2\",\n    \"babel-plugin-tcomb\": \"^0.4.0\",\n    \"babel-preset-minify\": \"^0.5.2\",\n    \"chai\": \"^5.1.1\",\n    \"chai-as-promised\": \"^8.0.0\",\n    \"esbuild\": \"^0.24.0\",\n    \"eslint\": \"^9.9.1\",\n    \"eslint-webpack-plugin\": \"^4.2.0\",\n    \"exports-loader\": \"^5.0.0\",\n    \"mocha\": \"^10.7.3\",\n    \"rimraf\": \"^6.0.1\",\n    \"sinon\": \"^18.0.0\",\n    \"tcomb\": \"^3.2.29\",\n    \"terser-webpack-plugin\": \"^5.3.10\",\n    \"webpack\": \"^5.94.0\",\n    \"webpack-cli\": \"^5.1.4\",\n    \"webpack-node-externals\": \"^3.0.0\"\n  }\n}\n", "\"use strict\"\n\nimport pkg from \"../../../package.json\"\nimport { readFileSync, statSync, writeFileSync, unlink } from \"fs\"\nimport { performance } from \"perf_hooks\"\n\nimport Logger from \"../Logger\"\n\nimport {\n  IEVSE,\n  IEVSEConfiguration,\n  IEVSEEventsQueue,\n  IEVSEOptions,\n  IEVSEOSConfiguration,\n  IEVSEManufacturerConfiguration,\n  IComponentModules\n} from \"./interfaces\"\n\nimport {\n  EAvailability,\n  EChargingScheduleAllowedChargingRateUnit,\n  ECurrentLevel,\n  EMeterType,\n  EDiagnosticStatus,\n  EEventsQueueDBType,\n  ENetworkModeEVSE,\n  EPowerType,\n  EVoltageLevel,\n  EPerfMarksFTPUpload,\n  EPerfMeasuresFTPUpload\n} from \"./enums\"\nimport { EventsQueue }                                from \"../Queue\"\nimport { EVSEConnector }                              from  \"../EVSEConnector\"\nimport { EConnectorStatus }                           from \"../EVSEConnector/enums\"\nimport { OCPPTransport, FTPTransport, SFTPTransport } from \"../Transport\"\nimport { ETransportType, EEvent }                     from \"../Transport/enums\"\nimport { IPayload, Transport }                        from \"../Transport/interfaces\"\n\nconst logger = new Logger( /*{out:\"./logs/ocpp_log.log\"}*/ )\n\n// TODO: Abstract Logger, and set in options of base objects\n// TODO: Add output file, and file rotation to logging\nconst validateOptions = (options: any) => {\n  switch( true ) {\n    case !options.id && typeof options.id !== 'number': throw SyntaxError( \"EVSEBase Constructor: Options argument is missing required property(id)\" );\n    case !options.serialNumber                        : throw SyntaxError( \"EVSEBase Constructor: Options argument is missing required property(serialNumber)\" );\n    case options.connectors.length < 1                : logger.warn( \"Will not distribute power, no connectors registered\")\n      default: break\n  }\n}\n\nexport class EVSE implements IEVSE {\n  availability: EAvailability = EAvailability.AVAILABLE;\n  connectors: EVSEConnector[] = []\n  voltage:EVoltageLevel = EVoltageLevel.AC_LEVEL_2_SINGLE_PHASE\n  current:ECurrentLevel = ECurrentLevel.AC_LEVEL_2\n  powerType:EPowerType = EPowerType.SPLIT_PHASE_AC\n  meterValue:number = 0\n  id: string | number\n  vendorId: string | undefined\n  model: string | undefined\n  serialNumber: string\n  lastHeartbeat: string | undefined\n  location: string | undefined\n  maxPower: number | undefined\n  transport: Transport[] = []\n  eventsQueue: IEVSEEventsQueue = {\n    queue: null,\n    dbType: EEventsQueueDBType.MEMORY,\n    host: \"\",\n    port: 0\n  }\n  configuration: IEVSEConfiguration = {\n    allowOfflineTxForUnknownId       : true,\n    authorizationCacheEnabled        : false,\n    clockAlignedDataInterval         : 0,\n    connectionTimeOut                : 100,// ms\n    getConfigurationMaxKeys          : 128,\n    heartbeatInterval                : 300000,// ms\n    localAuthorizeOffline            : true,\n    localPreAuthorize                : false,\n    meterValuesAlignedData           : 0,\n    meterValueSampleInterval         : 3000,//ms\n    numberOfConnectors               : 2, \n    resetRetries                     : 10,\n    stopTransactionOnEVSideDisconnect: true,\n    stopTransactionOnInvalidId       : true\n  }\n  os: IEVSEOSConfiguration = {\n    firmware: {\n      version: pkg.version,\n      downloadInterval: 300,  // Download interval in seconds\n      downloadRetries: 10,    // Number of retries\n    },\n    logs:[\n      //{ name: \"OCPP_LOG\", path: \"./ocpp.log\" }\n    ],\n    diagnostics: {\n      status   : EDiagnosticStatus.NEVER ,\n      timestamp: \"\"\n    },\n    temporaryDirectory: \"/tmp\"\n  }\n  manufacturer: IEVSEManufacturerConfiguration = {\n    vendor              : \"\",\n    model               : \"\",\n    chargeRate          : EChargingScheduleAllowedChargingRateUnit.W,\n    autoReset           : true,\n    energyMeter         : {\n      type        : EMeterType.REVENUE_GRADE,\n      serialNumber: \"\",\n      currentValue: 0\n    },\n    overheatProtection  : false,\n    networkMode         : ENetworkModeEVSE.WIFI,\n    userInterfaceEnabled: true,\n    voltageLimit        : null,\n    currentLimit        : null\n  }\n  hardwareModules: IComponentModules = {\n    powerMeters             : [],\n    evseRelays              : [],\n    connectorRelays         : [],\n    overloadProtectionRelays: [],\n    hmis                    : {\n      indicators: { power: undefined, active: undefined, inactive: undefined }\n    },\n    communications          : {\n      serial  :[],\n      ble     :[],\n      rfid    :[],\n      nfc     :[],\n      lora    :[],\n      wifi    :[],\n      rj45    :[],\n      cellular:[]\n    }\n  }\n  \n  #ocppTransports: OCPPTransport[]\n  #ftpTransports : Array<FTPTransport|SFTPTransport>\n\n  //#commsTransport: \n  //#serialTransports: SerialTransport[]\n  //#wanTransports: WANTransport[]\n  constructor( options:IEVSEOptions ){\n    validateOptions( options )\n    this.id = options.id\n    this.serialNumber = options.serialNumber;\n    this.connectors = options.connectors.filter( connector => connector instanceof EVSEConnector ) as EVSEConnector[] || []\n    this.#ocppTransports = typeof options.transport === 'object'\n                          ? options.transport.filter( transport => transport instanceof OCPPTransport )\n                          : options.transport instanceof OCPPTransport ? [ options.transport ] : []\n    this.#ftpTransports = typeof options.transport === 'object'\n                          ? options.transport.filter( transport => transport instanceof FTPTransport || transport instanceof SFTPTransport )\n                          : options.transport instanceof FTPTransport ? [ options.transport ] : []\n    this.configuration = { ...this.configuration, ...options.configuration }\n    this.eventsQueue = { ...this.eventsQueue, ...options.eventsQueue }\n    this.os = { ...this.os, ...options.os }\n    this.manufacturer = { ...this.manufacturer, ...options.manufacturer }\n    this.hardwareModules = { ...this.hardwareModules, ...options.hardwareModules }\n\n    if ( !(this instanceof EVSE ) ) {\n      return new EVSE( options )\n    }\n    return (async ()=> {\n      try {\n        await this.#setupEventsQueue()\n        this.#startUp()\n        await this.#connectToCentralSystem()\n      } catch ( warn ) {\n        console.warn( warn )\n      }\n      return this\n    })()\n  }\n  async emit( method:string, payload?: IPayload ):Promise<void>{\n    let recieved = false\n    try {\n      for ( const transport of this.#ocppTransports ) {\n        if ( !transport.isConnected() ) continue\n        try {\n          await transport.sendMessage( method, payload )\n          recieved = true\n        } catch (e) {\n          console.error(e)\n        }\n      }\n      if ( recieved === false ) throw \"No available transport connection\"\n    } catch ( e ) {\n      if ( this.eventsQueue.queue instanceof EventsQueue )\n      this.eventsQueue.queue.enqueueEvent( method, payload )\n    }\n  }\n  #startUp(){\n    try {\n      this.#boot()\n      this.#heartbeatSetup()\n      this.#emitAvailability()\n    } catch ( e ){\n      console.error( e )\n      throw e\n    }\n  }\n  async #setupEventsQueue(){\n    if ( !this.eventsQueue ){\n      logger.warn( \"ONLY USE FOR TESTING PURPOSES: Default Event Queue is only using ram. Power reset will result in data loss.\" )\n    }\n    const { dbType, host, port } = this.eventsQueue\n    this.eventsQueue.queue = await new EventsQueue( { dbType, host, port } )\n    await this.eventsQueue.queue.hydrate()\n  }\n  async #connectToCentralSystem(){\n    for ( const transport of this.#ocppTransports ) {\n      await transport.connect()\n      await this.#listenToOCPPTransport( transport )\n    }\n    while ( this.eventsQueue.queue && this.eventsQueue.queue.length > 0 ){\n      for ( const transport of this.#ocppTransports ) {\n        const { method, payload } = await this.eventsQueue.queue.dequeueEvent()\n        console.log(\"sending queued message:\", method, payload)\n        await transport.sendMessage(method, payload )\n      }\n    }\n  }\n  async #listenToOCPPTransport( transport:OCPPTransport ){\n    transport.on( \"OCPP_EVENT\", async eventData => {\n      if ( !eventData ) return\n      if ( transport.centralSystemService.type === ETransportType.OCPP1_6J ){\n        const [ messageType, messageId, eventMethod, eventPayload ] = eventData\n        //logger.info( \"OCPP_EVENT: \", [ messageType, messageId, eventMethod, eventPayload ] )\n        switch( eventMethod ){\n          case EEvent.GET_DIAGNOSTICS:{\n            const { location } = eventPayload\n            try{\n              await this.#sendDiagnostics({ location })\n              transport.sendResponse( messageId, { status: \"Accepted\", filename: location } )\n            } catch ( e ) {\n              console.error( e )\n              transport.sendResponse( messageId, { status: \"Rejected\" } )\n            }\n            break;\n          }\n          case EEvent.CHANGE_AVAILABILITY:{\n            const { connectorId, type } = eventPayload\n            try {\n              await this.#updateAvailability( connectorId, type )\n              transport.sendResponse( messageId, { status: \"Accepted\" } )\n            } catch ( e ) {\n              console.error( e )\n              transport.sendResponse( messageId, { status: \"Rejected\" } )\n            }\n            break;\n          }\n          case EEvent.REMOTE_START_TRANSACTION: {\n            const {\n              idTag,\n              connectorId\n            } = eventPayload\n            try {\n              if ( !idTag ) throw new Error( \"Missing idTag\")\n              if ( !connectorId ) throw new Error( \"Missing ConnectorId \" )\n              await this.remoteStartTransaction( idTag, connectorId )\n            } catch ( e ) {\n              transport.sendResponse( messageId, { status: \"Rejected\" } )\n            }\n            break;\n          }\n          case EEvent.REMOTE_STOP_TRANSACTION: {\n            \n            break;\n          }\n          default: break;\n        }\n      }\n    })\n  }\n  #boot(){\n    this.emit(\n      \"BootNotification\",\n      {\n        chargePointVendor      : this.manufacturer.vendor,\n        chargePointModel       : this.manufacturer.model,\n        chargePointSerialNumber: this.serialNumber,  // Optional\n        chargeBoxSerialNumber  : this.serialNumber,  // Optional\n        firmwareVersion        : this.os.firmware.version,  // Optional\n        iccid                  : \"\",  // Optional\n        imsi                   : \"123456789012345\",  // Optional\n        meterType              : this.manufacturer.energyMeter.type\n      }\n    )\n  }\n  #heartbeatSetup(){\n    setInterval(() => {\n      this.lastHeartbeat = new Date().toISOString()\n      this.emit( \"Heartbeat\" )\n    }, this.configuration.heartbeatInterval || process.env.HEARTBEAT_INTERVAL || 120000);\n    this.lastHeartbeat = new Date().toISOString()\n    this.emit( \"Heartbeat\" )\n  }\n  async #ftpUpload( transport:FTPTransport|SFTPTransport, localPath:string , remotePath:string ){\n    /**\n     * Start EVSE FTP Upload Timer\n    */\n    performance.mark(EPerfMarksFTPUpload.FTP_UPLOAD_CONNECTING)\n\n    await transport.connect()\n    \n    const localFileStats:any = statSync(localPath)\n\n    this.emit( \"DiagnosticStatusNotification\", {\n      status    : EDiagnosticStatus.UPLOADING,\n      fileName  : remotePath,\n      fileSize  : localFileStats.size,\n      path      : `${transport.uri}${remotePath}`,\n      timestamp : new Date().toISOString(),\n      duration  : (\n                    performance.mark( EPerfMarksFTPUpload.START_FTP_UPLOAD ),\n                    performance.measure(\n                      EPerfMeasuresFTPUpload.FTP_TIME_TO_CONNECT,\n                      EPerfMarksFTPUpload.FTP_UPLOAD_CONNECTING,\n                      EPerfMarksFTPUpload.START_FTP_UPLOAD\n                    ),\n                    performance.getEntriesByName(EPerfMeasuresFTPUpload.FTP_TIME_TO_CONNECT)[0].duration\n                  ),\n      retryCount: 0\n    })\n    await transport.uploadFile( localPath, remotePath )\n    this.emit( \"DiagnosticStatusNotification\", {\n      status    : EDiagnosticStatus.UPLOADED,\n      fileName  : remotePath,\n      fileSize  : localFileStats.size,\n      path      : `${transport.uri}${remotePath}`,\n      timestamp : new Date().toISOString(),\n      duration  : (\n        performance.mark( EPerfMarksFTPUpload.COMPLETE_FTP_UPLOAD),\n        performance.measure(\n          EPerfMeasuresFTPUpload.FTP_TIME_TO_UPLOAD,\n          EPerfMarksFTPUpload.START_FTP_UPLOAD,\n          EPerfMarksFTPUpload.COMPLETE_FTP_UPLOAD \n        ),\n        performance.getEntriesByName(EPerfMeasuresFTPUpload.FTP_TIME_TO_UPLOAD)[0].duration\n      ),\n      retryCount: 0\n    })\n    await transport.end()\n    Object.values( EPerfMarksFTPUpload ).forEach( mark => performance.clearMarks( mark ) )\n    Object.values( EPerfMeasuresFTPUpload ).forEach( measure=> performance.clearMeasures( measure ) )\n  }\n  \n  async #sendDiagnostics({ location, retries, interval, startTimestamp, stopTimestamp }:{location:string, retries?:number, interval?:number, startTimestamp?:string, stopTimestamp?:string}){\n    //TODO: manage the retries, interval, startTimestamp, and stopTimestamp\n    // const retry = () => this.#ftpUpload( transport, localPath, remotePath )\n    const match = location.match(\n                /([a-zA-Z]+):\\/\\/([a-zA-Z0-9._%+-]+):([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)(:[0-9]+)?(\\/.*)?/\n              )\n    if ( !match && this.os.logs.length === 0 )\n      throw new Error(\"EVSE#sendDiagnostics: [args{location}] not a full URI and log paths[options.os.logs[string]] \")\n    if ( !match && this.#ftpTransports.length === 0 )\n      throw new Error(\"EVSE#sendDiagnostics: [args{location}] not a full URI and no FTP transports [options.transports[FTPTransport] \")\n\n    const\n      combinedLog = this.os.logs.map(({name,path})=> `\\n--------${name}--------\\n ${readFileSync(path)} \\n-----------------------\\n`).join(\"\\n\"),\n      combinedLogPath = `${this.os.temporaryDirectory}/combined-log-export-${new Date().toISOString() }.log`\n\n    try { \n      writeFileSync( combinedLogPath, combinedLog, { encoding: \"utf-8\" } )\n    } catch ( e ) {\n      logger.error (\"Write File error for temp file: \", combinedLogPath)\n    }\n\n    if ( match ){\n      const [ remoteProtocol, remoteUsername, remotePassword, remoteHostname, remoteDirtyPort, remotePath = \"/\" ] = match,\n        remotePort = remoteDirtyPort.slice(1) || undefined\n      if ( !remoteHostname ) throw new SyntaxError( \"EVSE#sendDiagnostics: [location] property missing [hostname]\" )\n      if ( remoteUsername && !remotePassword ) throw new SyntaxError( \"EVSE#sendDiagnostics: Has [username] Missing [password]\" ) \n      if ( !remoteUsername && remotePassword ) throw new SyntaxError( \"EVSE#sendDiagnostics: Has [password] Missing [username]\" )\n      const transport = remoteProtocol && remoteProtocol?.toLowerCase() === \"sftp\"\n                          ? new SFTPTransport({\n                              host: remoteHostname,\n                              port: remotePort,\n                              user: remoteUsername,\n                              pass: remotePassword\n                            })\n                          : new FTPTransport({\n                              host: remoteHostname,\n                              port: remotePort,\n                              user: remoteUsername,\n                              pass: remotePassword\n                            })\n      await this.#ftpUpload( transport, combinedLogPath, remotePath )\n    } else {\n      await Promise.all(\n        this.#ftpTransports.map( async ( transport ) => {\n          if (!transport ) throw new Error( \"Unexpected transport error\" )\n          await this.#ftpUpload( transport, combinedLogPath, location )\n        })\n      )\n    }\n    await new Promise( ( resolve, reject ) => {\n      unlink( combinedLogPath, ( err ) => err ? reject( err ) : resolve( true ) )\n    })\n  }\n  #getDiagnosticStatusResponse(){\n    this.emit( \"GetDiagnosticsResponse\", {\n      filename: \"\"\n    })\n  }\n  #emitAvailability():void {\n    this.emit(\n      EEvent.STATUS_NOTIFICATION,\n      {\n        connectorId: 0,\n        status     : this.availability,\n        errorCode  : \"NoError\",\n        info       : \"Charger is \" + this.availability,\n        timestamp  : new Date().toISOString()\n      })\n    this.connectors.forEach( ({ id:connectorId, status }) => {\n      console.log( `${connectorId}: ${status}`)\n      this.emit(\n        EEvent.STATUS_NOTIFICATION,\n        {\n          connectorId,\n          status,\n          errorCode: \"NoError\",\n          info     : `Connector [${ connectorId }] is: ${status}`,\n          timestamp: new Date().toISOString()\n        })\n    })\n  }\n  #updateAvailability( connectorId: number, newAvailability: EAvailability ){\n    const availabilityUpdateMap = {\n      [EAvailability.INOPERATIVE]:EAvailability.UNAVAILABLE,\n      [EAvailability.OPERATIVE]:EAvailability.AVAILABLE,\n    }\n    if( connectorId === 0 ) {\n      if ( !Object.values( EAvailability ).some( type => type === newAvailability ) ){\n        throw new TypeError(`New availablility[${newAvailability}] not accpeted by EVSE` )\n      }\n      if ( this.availability === newAvailability ) {\n        throw new Error( `Cannot change, already set to [${this.availability}]` )\n      }\n      this.availability = availabilityUpdateMap[newAvailability]\n    } else {\n      this.connectors.filter( connector => connector.id !== connectorId )[0].updateStatus( availabilityUpdateMap[ newAvailability ] )\n    }\n    this.#emitAvailability()\n  }\n  async remoteStartTransaction( idTag: string, connectorId: number ){\n    if ( this.availability === EAvailability.UNAVAILABLE ) throw new Error( \"Charger in 'Unavailable' status\" )\n\n    const [ connector ]: EVSEConnector[] = this.connectors.filter( c => c.id === connectorId )\n    const connectorStatusInfo = connector.getStatus()\n\n    if ( !connector )                                     throw new Error( `No connector with ID: ${ connectorId }`)\n    if ( connector.status === EConnectorStatus.FAULTED )  throw new Error( \"Connector in Status: Faulted\" )\n    if ( connector.status === EConnectorStatus.OCCUPIED ) throw new Error( \"Connector in Status: Occupied\" )\n    if ( connector.status === EConnectorStatus.RESERVED ) throw new Error( \"Connector in Status: Reserved\" )\n    \n    if ( connectorStatusInfo.isCharging ) throw new Error( `Cannot Start, connector already charging` )\n    \n    if ( !connectorStatusInfo.isConnected ){\n      // set screen value( \"awaiting plugged message\" )\n      await connector.once( \"plugged\" )\n    }\n\n    // check local load management\n    // Check building load management\n    // check the grid status (DR)\n    \n    // [ISO15118] check if the vehicle can send power back into the charger\n    // get vehicle SOC\n    // get Vehicle battery capacity, and remaining energy requirement\n    // get max charging voltage and current\n    // get target SoC and desired charging range\n    // get battery temperature\n    // get Charging profile ( charging curve )\n    // get estimated charge time\n    // get battery health and diagnostic information\n    // get power and energy limits\n    // get vehicle idenitification and authentication information [ISO15118, plugNCharge]\n    // get charging mode (ac/dc)\n    // get v2g readiness and vehicle control signal\n\n    // set screen value( \"starting charge\" )\n    await connector.startCharging()\n  }\n}\nexport default EVSE", "\"use strict\"\n\nexport default class Logger {\n  constructor( ...args ){\n    if ( args.length === 0 ){\n      return console\n    }\n  }\n}", "\"use strict\"\n\nexport enum EErrorCode {\n  NO_ERROR               = \"NoError\",\n  CONNECTOR_LOCK_FAILURE = \"ConnectorLockFailure\",\n  GROUND_FAILURE         = \"GroundFailure\",\n  OVER_CURRENT_FAILURE   = \"OverCurrentFailure\",\n  POWER_METER_FAILURE    = \"PowerMeterFailure\",\n  POWER_SWITCH_FAILURE   = \"PowerSwitchFailure\",\n  READER_FAILURE         = \"ReaderFailure\",\n  RESET_FAILURE          = \"ResetFailure\",\n  UNDER_VOLTAGE          = \"UnderVoltage\",\n  OVER_VOLTAGE           = \"OverVoltage\",\n  WEAK_SIGNAL            = \"WeakSignal\"\n}\n\nexport enum EPerfMarksFTPUpload {\n  FTP_UPLOAD_CONNECTING = \"FTP_UPLOAD_CONNECTING\",\n  START_FTP_UPLOAD      = \"START_FTP_UPLOAD\",\n  COMPLETE_FTP_UPLOAD   = \"COMPLETE_FTP_UPLOAD\"\n}\nexport enum EPerfMeasuresFTPUpload {\n  FTP_TIME_TO_CONNECT = \"FTP_TIME_TO_CONNECT\",\n  FTP_TIME_TO_UPLOAD  = \"FTP_TIME_TO_UPLOAD\"\n}\nexport enum EChargingMode {\n  AC = 'AC',\n  DC = 'DC',\n}\nexport enum EPowerFrequency {\n  \"50HZ\" = \"50Hz\",\n  \"60HZ\" = \"60Hz\"  \n}\nexport enum EVoltageLevel {\n  AC_LEVEL_1 = 120,\n  AC_LEVEL_2_SINGLE_PHASE = 240,\n  AC_LEVEL_3_THREE_PHASE = 400,\n  DC_FAST_CHARGING_STANDARD = 500,\n  DC_FAST_CHARGING_HIGH_POWER = 800,\n  DC_FAST_CHARGING_ULTRA = 1000,\n}\nexport enum ECurrentLevel {\n  AC_LEVEL_1 = 16,\n  AC_LEVEL_2 = 32,\n  DC_FAST_STANDARD = 125,\n  DC_FAST_HIGH = 350,\n  DC_FAST_ULTRA = 500,\n}\nexport enum EPowerLevel {\n  AC_LEVEL_1 = 1.92,    \n  AC_LEVEL_2 = 22,      \n  DC_FAST_STANDARD = 50,\n  DC_FAST_HIGH = 350,   \n  DC_FAST_ULTRA = 1000,\n}\nexport enum EPowerType {\n  SINGLE_PHASE_AC = 'Single-Phase AC',\n  SPLIT_PHASE_AC = 'Split-phase AC',\n  THREE_PHASE_AC = 'Three-Phase AC',\n  DC = 'DC',\n  CONSTANT_VOLTAGE = 'Constant Voltage',\n  CONSTANT_CURRENT = 'Constant Current',\n}\nexport enum ESmartChargingCapability {\n  DYNAMIC_LOAD_MANAGEMENT = 'Dynamic Load Management',\n  SCHEDULED_CHARGING = 'Scheduled Charging',\n  VEHICLE_TO_GRID = 'Vehicle-to-Grid (V2G)',\n  DEMAND_RESPONSE = 'Demand Response',\n  POWER_SHARING = 'Power Sharing',\n}\nexport enum EGridStatus {\n  NOMINAL = 'Nominal',\n  CONSTRAINED = 'Constrained',\n  EMERGENCY = 'Emergency',\n}\nexport enum EDemandResponseStatus {\n  NONE = 'None',\n  CONSTRAINED = 'Constrained',\n  UNCONSTRAINED = 'Unconstrained',\n}\nexport enum EIngressProtection {\n  IP54 = 'IP54',\n  IP65 = 'IP65',\n  IP67 = 'IP67',\n}\nexport enum ETemperatureRange {\n  MIN = -30,\n  MAX = 50, \n}\nexport enum EHumidityRange {\n  MIN = 5, \n  MAX = 95,\n}\nexport enum EInstallationType {\n  WALL_MOUNTED = 'Wall-Mounted',\n  PEDESTAL = 'Pedestal',\n  POLE_MOUNTED = 'Pole-Mounted',\n}\nexport enum EDurabilityRating {\n  IMPACT_RESISTANT = 'Impact Resistant',\n  UV_RESISTANT = 'UV Resistant',\n  WEATHER_RESISTANT = 'Weather Resistant',\n}\nexport enum EFirmwareUpdateInterval {\n  DAILY = 'Daily',\n  WEEKLY = 'Weekly',\n  MONTHLY = 'Monthly',\n  MANUAL = 'Manual',\n}\n\nexport enum EErrorReporting {\n  STATUS_REPORT = 'Status Report',\n  DIAGNOSTIC_REPORT = 'Diagnostic Report',\n}\n\nexport enum ELockingMechanism {\n  AUTO_LOCK = 'Automatic Lock',\n  MANUAL_LOCK = 'Manual Lock',\n  NONE = 'None',\n}\n\nexport enum EPowerFactor {\n  PF_1   = 1.0,\n  PF_095 = 0.95,\n  PF_09  = 0.9,\n}\nexport enum EEventsQueueDBType {\n  MEMORY  = \"memory\",\n  REDIS   = \"redis\",\n  SQLITE3 = \"sqlite3\",\n  ROCKSDB = \"rocksdb\",\n  LEVELDB = \"leveldb\"\n}\nexport enum EAvailability {\n  AVAILABLE = \"Available\",\n  UNAVAILABLE = \"Unavailable\",\n  OPERATIVE = \"Operative\",\n  INOPERATIVE = \"Inoperative\"\n}\n// Charging Rate Units\nexport enum EChargingScheduleAllowedChargingRateUnit {\n  W = 'W',  // Watts\n  A = 'A',  // Amperes\n}\nexport enum EMeterType {\n  REVENUE_GRADE = 'Revenue Grade',\n  STANDARD = 'Standard',\n  BASIC = 'Basic',\n}\n// Network Modes\nexport enum ENetworkModeEVSE {\n  WIFI = 'WiFi',\n  ETHERNET = 'Ethernet',\n  CELLULAR = 'Cellular',\n  BLUETOOTH = 'Bluetooth'\n}\nexport enum EDiagnosticStatus {\n  UPLOADED = \"Uploaded\",\n  UPLOADING = \"Uploading\",\n  UPLOAD_FAILED = \"UploadFailed\",\n  NEVER = \"Never\"\n}", "\"use strict\"\n\nimport Database from \"./Database\"\nimport { EventEmitter } from \"events\"\nimport { EEvent } from \"../Transport/interfaces\"\n\nexport interface IDatabaseConfiguration {\n  host: string;\n  port: number;\n  path: string;\n}\n\nexport enum EEventsQueueDBType {\n  SQLITE3 = 'sqlite3',\n  LEVELDB = 'leveldb',\n  ROCKSDB = 'rocksdb',\n  REDIS   = 'redis',\n  MEMORY  = 'memory'\n}\n\nexport interface IPayload {\n  [key: string]: any;\n  timestamp?: string;\n}\n\nexport interface IEventsQueue {\n  queue      : string[]\n  eventStream: Generator\n  db         : Database\n  emitter    : EventEmitter\n  events     : EEvent | EEvent[]\n}\n\nexport interface IEventsQueueOptions {\n  dbType: EEventsQueueDBType\n  host ?: string\n  path ?: string\n  port ?: number\n  events: EEvent | EEvent[]\n}", "\"use strict\"\nimport { EEventsQueueDBType, IEventsQueue, IEventsQueueOptions, IPayload } from \"./interfaces\"\nimport { EEvent } from \"../Transport/enums\"\nimport { EventEmitter } from \"events\"\nimport Database from \"./Database\"\n\nexport class EventsQueue implements IEventsQueue{\n  queue      :string[]           = []\n  eventStream:Generator\n  db         :Database\n  emitter    :EventEmitter       = new EventEmitter()\n  events     : EEvent | EEvent[] = []\n  constructor({ dbType = EEventsQueueDBType.MEMORY, host, path, port , events }: IEventsQueueOptions) {\n    this.events = events\n    this.eventStream = this._eventGenerator();\n    if ( !(this instanceof EventsQueue) ) {\n      return new EventsQueue( arguments[0] )\n    }\n    return (async () => {\n      if ( dbType === EEventsQueueDBType.MEMORY){\n        console.warn( \"Queue will not persist, dbType[memory]\" )\n      } else {\n        if ( !host ){\n          throw new Error( `Missing {host} on intilizer` )\n        } else if (!port ) {\n          throw new Error( `Missing {port} on intilizer` )\n        } else if ( !path ) {\n          throw new Error( `Missing {path} on intilizer` )\n        }\n        const db = await new Database( dbType, { path, host, port } )\n        if ( !(db instanceof Database) ) {\n          console.warn(\"Invalid database instance provided.\");\n        } else {\n          this.db = db;\n          try {\n            await this.db.initialize();\n          } catch ( e ) {\n            console.error( e );\n          }\n        }\n      }\n      return this\n    })()\n  }\n  async hydrate():Promise<void>{\n    try {\n      if (this.db) { this.queue.push( ...( await this.db.fetchAll() ) ) }\n    } catch (e) {\n      console.error( e )\n    }\n  }\n  *_eventGenerator():Generator {\n    while (true) {\n      yield this.queue.length === 0 ? null : this.queue.shift()\n    }\n  }\n  async enqueue( event: string ):Promise<boolean>{\n    try{\n      if (this.db) {\n        await this.db.insert(event);\n      }\n    } catch ( e ){\n      console.error( e )\n    } finally {\n      this.queue.push(event)\n      return true\n    }\n  }\n  async dequeue():Promise<string> {\n    const event:string = this.eventStream.next().value\n    try{\n      event && this.db ? await this.db.delete(event) : null\n    } catch ( e ){\n      console.error( e )\n    }\n    return event\n  }\n  get length():number {\n    return this.queue.length\n  }\n  on( eventName: string, callBack: Function | any ):void{\n    this.emitter.on( eventName, callBack )\n  }\n  off( eventName: string, callBack: Function | any ):void{\n    this.emitter.off( eventName, callBack )\n  }\n  async enqueueEvent( method: string, payload?: IPayload ):Promise<void>{\n    const event = JSON.stringify({ method, payload})\n    try {\n      await this.enqueue( event )\n      this.emitter.emit( \"EVENT_QUEUED\", event )\n    } catch ( e ){\n      console.error( e )\n    }\n  }\n  async dequeueEvent():Promise<{method:string,payload:IPayload}>{\n    const event = JSON.parse(await this.dequeue())\n    try{\n      this.emitter.emit( \"EVENT_DEQUEUED\", event )\n    } catch ( e ){\n      console.error( e )\n    } finally {\n      return event\n    }\n  }\n}", "\"use strict\";\nimport {\n    EEventsQueueDBType,\n    IDatabaseConfiguration,\n } from \"./interfaces\"\n import {\n    EEvent\n } from \"../Transport/interfaces\"\nexport default class Database { //implements IDatabase {\n    db:any = null\n    dbType\n    configuration:IDatabaseConfiguration = { host: \"localhost\", port: 5432, path: \"/\" }\n    supportedDBTypes:EEventsQueueDBType[] = Object.values(EEventsQueueDBType)\n\n    constructor( dbType:EEventsQueueDBType, configuration:IDatabaseConfiguration ) {\n        if (!this.supportedDBTypes.includes(dbType)) {\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n        this.dbType = dbType\n        this.configuration = configuration;\n    }\n\n    async initialize() {\n      this.db = await this.#createClient();\n      if (this.dbType === 'sqlite3') {\n          await new Promise((resolve, reject) => {\n            if ( this.db ) {\n              this.db.run(\n                  \"CREATE TABLE IF NOT EXISTS queue (id INTEGER PRIMARY KEY AUTOINCREMENT, event TEXT)\",\n                  (err) => {\n                      if (err) reject(err);\n                      else resolve( true );\n                  }\n              );\n            }\n          });\n      }\n    }\n\n    async #createClient() {\n      switch (this.dbType) {\n        case 'sqlite3':\n          try {\n            const sqlite3 = await import('sqlite3');\n            return new sqlite3.Database(this.configuration.path || ':memory:');\n          } catch ( e ) {\n            console.warn( e )\n          }\n        case 'leveldb':\n          try {\n            const level = await import('level');\n            return level.default(this.configuration.path || './leveldb');\n          } catch ( e ) {\n            console.warn( e )\n          }\n        case 'rocksdb':\n          try {\n            const rocksdb = await import('rocksdb');\n            return rocksdb(this.configuration.path || './rocksdb');\n          } catch ( e ) {\n            console.warn( e )\n          }\n        case 'redis':\n          try {\n            const redis = await import('redis');\n            const client = redis.createClient({\n                url: `redis://${this.configuration.host || 'localhost'}:${this.configuration.port || 6379}`,\n                // Optional auth properties can be added here\n            });\n            await client.connect();\n            return client;\n          } catch ( e ) {\n            console.warn( e )\n          }\n        default:\n          throw new Error(`Unsupported database type: ${this.dbType}`);\n      }\n    }\n\n    async insert(event) {\n        const eventStr = JSON.stringify(event.message);\n        switch (this.dbType) {\n            case 'sqlite3':\n                await new Promise((resolve, reject) => {\n                    this.db.run(\"INSERT INTO queue (id, event) VALUES (?)\", [event.id, eventStr], (err) => {\n                        if (err) reject(err);\n                        else resolve( true );\n                    });\n                });\n                break;\n            case 'leveldb':\n            case 'rocksdb':\n                await this.db.put(event.id, eventStr);\n                break;\n            case 'redis':\n                await this.db.set(event.id, eventStr);\n                break;\n        }\n    }\n\n    async delete(event) {\n        switch (this.dbType) {\n            case 'sqlite3':\n                await new Promise((resolve, reject) => {\n                    this.db.run(\"DELETE FROM queue WHERE id = ?\", [event.id], (err) => {\n                        if (err) reject(err);\n                        else resolve( true );\n                    });\n                });\n                break;\n            case 'leveldb':\n            case 'rocksdb':\n            case 'redis':\n                await this.db.del(event.id);\n                break;\n        }\n    }\n\n    async fetchAll() {\n        const events:EEvent[] = [];\n        switch (this.dbType) {\n            case 'sqlite3':\n                return new Promise((resolve, reject) => {\n                    this.db.all(\"SELECT id, event FROM queue ORDER BY id ASC\", [], (err, rows) => {\n                        if (err) reject(err);\n                        resolve(rows.map(row => {\n                            const event:EEvent = JSON.parse( row )\n                            events.push( event );\n                        }));\n                    });\n                });\n            case 'leveldb':\n            case 'rocksdb':\n                for await (const [_, value] of this.db.iterator()) {\n                    const event:EEvent = JSON.parse(value)\n                    events.push( event );\n                }\n                return events;\n            case 'redis':\n                const keys = await this.db.keys('*');\n                for (const key of keys) {\n                    const value = await this.db.get(key);\n                    const event:EEvent = JSON.parse(value)\n                    events.push( event );\n                }\n                return events;\n        }\n    }\n}", "\"use strict\"\n\nexport enum EConnectorType {\n  \"TYPE1\" = \"SAE_J1772\",\n  \"TYPE2\" = \"IEC_62196_2\",\n  \"CCS1\" = \"CCS_Type_1\",\n  \"CCS2\" = \"CCS_Type_2\",\n  \"CHADEMO\" = \"CHAdeMO\",\n  \"TESLA\" = \"Tesla\",\n  \"GB_T\" = \"GB/T\",\n  \"TYPE3\" = \"Type3\"\n}\nexport enum ECommunicationProtocol {\n  \"SAE_J1772\" = \"SAE J1772\",\n  \"IEC_62196_2\" = \"IEC 62196-2\",\n  \"ISO_15118\" = \"ISO 15118\",\n  \"CHADEMO\" = \"CHAdeMO\",\n  \"TESLA\" = \"Tesla\",\n  \"GB_T\" = \"GB/T\",\n  \"TYPE3\" = \"Type3\"\n}\nexport enum EIsolationStatus {\n  \"PLUGGED\" = \"plugged\",\n  \"UNPLUGGED\" = \"unplugged\"\n}\nexport enum EChargingMode {\n  \"AC\" = \"AC\",\n  \"DC\" = \"DC\"\n}\nexport enum EGridStatus {\n  \"NOMINAL\" = \"nominal\",\n  \"CONSTRAINED\" = \"constrained\",\n  \"EMERGENCY\" = \"emergency\"\n}\nexport enum EDemandResponseStatus {\n  \"NONE\" = 'none',\n  \"CONSTRAINED\" = 'constrained',\n  \"UNCONSTRAINED\" = 'unconstrained'\n}\nexport enum EAvailability {\n  OPERATIVE = \"Operative\",\n  INOPERATIVE = \"Inoperative\"\n}\nexport enum EErrorCode {\n  NO_ERROR = \"NoError\",\n  CONNECTOR_LOCK_FAILURE = \"ConnectorLockFailure\",\n  GROUND_FAILURE = \"GroundFailure\",\n  OVER_CURRENT_FAILURE = \"OverCurrentFailure\",\n  POWER_METER_FAILURE = \"PowerMeterFailure\",\n  POWER_SWITCH_FAILURE = \"PowerSwitchFailure\",\n  READER_FAILURE = \"ReaderFailure\",\n  RESET_FAILURE = \"ResetFailure\",\n  UNDER_VOLTAGE = \"UnderVoltage\",\n  OVER_VOLTAGE = \"OverVoltage\",\n  WEAK_SIGNAL = \"WeakSignal\"\n}\nexport enum EConnectorStatus {\n  AVAILABLE      = \"Available\",\n  UNAVAILABLE    = \"Unavailable\",\n  OCCUPIED       = \"Occupied\",\n  RESERVED       = \"Reserved\",\n  FAULTED        = \"Faulted\",\n  CHARGING       = \"Charging\",\n  SUSPENDED_EV   = \"SuspendedEV\",\n  SUSPENDED_EVSE = \"SuspendedEVSE\",\n  FINISHING      = \"Finishing\"\n}", "import { EventEmitter, once } from \"events\"\n\nexport default class EventsObject extends EventEmitter {\n  once( ...args ) {\n    once( this, ...args )\n    return this\n  }\n}", "\"use strict\"\nimport {\n  IEVSEConnectorOptions,\n  IEVSEConnectorRelays\n} from \"./interfaces\"\nimport {\n  TEVSEConnector,\n  TType1Connector,\n  TType2Connector,\n  TType3Connector,\n  TCCSConnector,\n  TCHAdeMOConnector,\n  TTeslaConnector,\n  TGBTConnector\n} from \"./types\"\nimport {\n  EAvailability,\n  EConnectorStatus,\n  EConnectorType,\n  EIsolationStatus,\n  EChargingMode,\n  ECommunicationProtocol,\n  EGridStatus,\n  EDemandResponseStatus\n} from \"./enums\"\nimport { TPowerMeter } from \"../Hardware/powermeter/types\" \nimport EventsObject from \"../EventsObject\"\n\n\nexport class EVSEConnector extends EventsObject implements TEVSEConnector, EventsObject {\n  id                   : string | number | symbol;\n  status               : EConnectorStatus       = EConnectorStatus.AVAILABLE;\n  connectorType        : EConnectorType;\n  maxVoltage           : number                 = 120; // V\n  maxCurrent           : number                 = 32;  // A\n  cableLength          : number                 = 0;   // cm\n  isConnected          : boolean                = false;\n  isCharging           : boolean                = false;\n  powerOutput          : number                 = 0;\n  isolationStatus      : EIsolationStatus       = EIsolationStatus.UNPLUGGED;\n  vehicleSoc           : number                 = 0;\n  targetSoc            : number                 = 80;\n  chargingMode         : EChargingMode          = EChargingMode.DC;\n  communicationProtocol: ECommunicationProtocol = ECommunicationProtocol.ISO_15118;\n  energyPrice          : number                 = 0.15;\n  gridStatus           : EGridStatus            = EGridStatus.NOMINAL;\n  demandResponseStatus : EDemandResponseStatus  = EDemandResponseStatus.NONE;\n  powerMeters          : TPowerMeter[];\n  relays               : IEVSEConnectorRelays;\n\n  constructor( configuration:IEVSEConnectorOptions ) {\n    super()\n    Object.entries( configuration )\n          .forEach(\n            ( [ key, value ] ) => this[ key ] = value\n          )\n  }\n  async connect() {\n    this.isConnected\n      ? console.log( `Connector[${ typeof this.id === \"symbol\" ? this.id.description : this.id }] already connected.` )\n      : ( this.isConnected = true,\n          this.isolationStatus = EIsolationStatus.PLUGGED,\n          this.emit( EIsolationStatus.PLUGGED ),\n          console.log( `${this.connectorType} vehicle connected.`));\n  }\n\n  async disconnect() {\n    this.isConnected\n      ? (this.isConnected = false,\n         this.isolationStatus = EIsolationStatus.UNPLUGGED,\n         this.isCharging = false,\n         this.powerOutput = 0,\n         console.log(`${this.connectorType} vehicle disconnected.`))\n      : console.log('No vehicle connected.');\n  }\n\n  async startCharging() {\n    if (!this.isConnected) {\n      throw \"No vehicle connected. Cannot start charging.\"\n    }\n    if (this.isCharging) {\n      throw \"Charging already in progress.\"\n    }\n    this.isCharging = true;\n    this.powerOutput = await this.calculatePowerOutput();\n    console.log(`Charging started in ${this.chargingMode} mode. Output: ${this.powerOutput} kW`);\n  }\n\n  async stopCharging() {\n    this.isCharging\n      ? (this.isCharging = false,\n         this.powerOutput = 0,\n         console.log('Charging stopped.'))\n      : console.log('No charging in progress.');\n  }\n\n  // Calculate power output based on charging mode, grid, and demand response status\n  async calculatePowerOutput() {\n    const basePower = (this.maxVoltage * this.maxCurrent) / 1000; // kW\n    return this.demandResponseStatus === EDemandResponseStatus.CONSTRAINED\n      ? basePower * 0.5 // Reduce power by 50% during constrained DR events\n      : this.gridStatus === EGridStatus.EMERGENCY\n        ? 0 // Stop charging during grid emergencies\n        : basePower;\n  }\n\n  // Update vehicle state of charge\n  updateSoc(soc: number) {\n    this.vehicleSoc = soc;\n    console.log(`Vehicle state of charge updated to ${this.vehicleSoc}`);\n  }\n\n  // Adjust target state of charge for smart charging\n  setTargetSoc(targetSoc: number) {\n    this.targetSoc = targetSoc;\n    console.log(`Target state of charge set to ${this.targetSoc}`);\n  }\n\n  // Set the energy price for OpenADR\n  setEnergyPrice(price: number) {\n    this.energyPrice = price;\n    console.log(`Energy price updated to $${this.energyPrice} per kWh`);\n  }\n\n  // Update grid status for IEEE 2030.5\n  updateGridStatus(status: EGridStatus) {\n    this.gridStatus = status;\n    console.log(`Grid status updated to ${this.gridStatus}`);\n  }\n\n  // Set demand response event status for OpenADR\n  setDemandResponseStatus(status: EDemandResponseStatus) {\n    this.demandResponseStatus = status;\n    console.log(`Demand response status updated to ${this.demandResponseStatus}`);\n  }\n\n  getStatus() {\n    return {\n      connectorType: this.connectorType,\n      maxVoltage: this.maxVoltage,\n      maxCurrent: this.maxCurrent,\n      cableLength: this.cableLength,\n      isConnected: this.isConnected,\n      isCharging: this.isCharging,\n      powerOutput: this.powerOutput,\n      isolationStatus: this.isolationStatus,\n      vehicleSoc: this.vehicleSoc,\n      targetSoc: this.targetSoc,\n      chargingMode: this.chargingMode,\n      communicationProtocol: this.communicationProtocol,\n      energyPrice: this.energyPrice,\n      gridStatus: this.gridStatus,\n      demandResponseStatus: this.demandResponseStatus,\n    };\n  }\n  updateStatus( newStatus: EConnectorStatus ){\n    if ( !Object.values( EConnectorStatus ).some( type => type === newStatus ) ){\n      throw new TypeError(`New availablility[${newStatus}] not accpeted by connector[${this.id}]`) \n    }\n    this.status = newStatus\n  }\n}\n\nexport class Type1Connector extends EVSEConnector implements TType1Connector {\n  declare connectorType: EConnectorType.TYPE1;\n  declare communicationProtocol: ECommunicationProtocol.SAE_J1772;\n}\nexport class Type2Connector extends EVSEConnector implements TType2Connector{\n  declare connectorType: EConnectorType.TYPE2;\n  declare communicationProtocol: ECommunicationProtocol.IEC_62196_2;\n}\nexport class Type3Connector extends EVSEConnector implements TType3Connector{\n  declare connectorType: EConnectorType.TYPE3;\n  declare chargingMode: EChargingMode.DC;\n  declare communicationProtocol: ECommunicationProtocol.TYPE3;\n}\nexport class CCSConnector extends EVSEConnector implements TCCSConnector{\n  declare connectorType: EConnectorType.CCS1 | EConnectorType.CCS2;\n  declare chargingMode: EChargingMode.DC;\n  declare communicationProtocol: ECommunicationProtocol.ISO_15118;\n}\nexport class CHAdeMOConnector extends EVSEConnector implements TCHAdeMOConnector{\n  declare connectorType: EConnectorType.CHADEMO;\n  declare chargingMode: EChargingMode.DC;\n  declare communicationProtocol: ECommunicationProtocol.CHADEMO;\n}\nexport class TeslaConnector extends EVSEConnector implements TTeslaConnector{\n  declare connectorType: EConnectorType.TESLA;\n  declare communicationProtocol: ECommunicationProtocol.TESLA;\n}\nexport class GBTConnector extends EVSEConnector implements TGBTConnector{\n  declare connectorType: EConnectorType.GB_T;\n  declare communicationProtocol: ECommunicationProtocol.GB_T;\n}", "\"use strict\"\n\nimport { randomBytes } from \"crypto\"\nimport { connect as tlsConnect } from \"tls\"\nimport { connect as netConnect } from \"net\"\nimport EventsObject from \"../EventsObject\"\n\nimport { ICentralSystemService, IPayload, IOCPPTransport, IOCPPTransportOptions } from \"./interfaces\"\nimport { EEvent, ETransportType, EReconnectStrategy, EWebSocketProtocol} from \"./enums\"\n\nimport { CallEnvelope, ResponseEnvelope, parseWebSocketFrame } from \"./Envelope\"\n\nexport class OCPPTransport extends EventsObject implements IOCPPTransport {\n  events: EEvent[] = Object.values( EEvent )\n  centralSystemService:ICentralSystemService = {\n    type: ETransportType.OCPP1_6J,\n    host: \"localhost\",\n    port: 80,\n    path: \"/\",\n    protocol: EWebSocketProtocol.WS,\n    reconnect: {\n      strategy: EReconnectStrategy.LINEAR,\n      timeout : 3000,\n      attempts: 10\n    }\n  }\n  #link:any\n  #linkError:Error|undefined\n  #reconnectCount:number = 0\n  constructor( options: IOCPPTransportOptions ) {\n    super()\n    this.events = options.events ? options.events : this.events;\n\n    this.centralSystemService = {\n      ...options.centralSystemService,\n      tls: { \n        ...this.centralSystemService.tls,\n        ...options.centralSystemService.tls\n      },\n      ftp: {\n        ...this.centralSystemService.ftp,\n        ...options.centralSystemService.ftp\n      },\n      reconnect: {\n        ...this.centralSystemService.reconnect,\n        ...options.centralSystemService.reconnect\n      }\n    }\n\n    // Now `mergedOptions` has `path` and `protocol` with default values if they weren\u2019t provided\n    // console.log('Connecting to:', mergedOptions);\n  }\n  async connect(): Promise<void> {\n    const { host, port, path, protocol, tls }:ICentralSystemService = this.centralSystemService\n    if ( !host || !port || !path ){\n      throw new SyntaxError(\"Cannot connect without options.centralSystemService[host|port|path]\")\n    }\n    return new Promise( ( resolve, reject ) => {\n      const connectCallback = async () => {\n        console.log(`${tls?.enabled ? \"\uD83D\uDD12 Securely\" :\"\"} connected to server`);\n        this.#link.write([\n            `GET ${path} HTTP/1.1`,\n            `Host: ${host}:${port} `,\n            `Upgrade: websocket`,\n            `Connection: Upgrade`,\n            `Sec-WebSocket-Key: ${randomBytes(16).toString('base64')}`,\n            `Sec-WebSocket-Version: 13`,\n            `Sec-Websocket-Protocol: ${this.centralSystemService.type}`\n          ]\n          .map( header => Buffer.from(header, 'ascii').toString('ascii') )\n          .join('\\r\\n') + '\\r\\n\\r\\n' \n        )\n        this.#reconnectCount = 0\n        this.#linkError = undefined\n        resolve()\n      }\n      console.log(`ws://${host}:${port}${path}`)\n      const connectOptions = {\n        host, port\n      }, tlsConnectOptions = {\n        ...connectOptions,\n        protocol, ca: tls?.ca,\n        rejectUnauthorized: true,\n        keepAlive: true\n      }\n      this.#link = !tls?.enabled\n                    ? netConnect( connectOptions, connectCallback)\n                    : tlsConnect( tlsConnectOptions, connectCallback )\n      \n      this.#link.on('data', ( data: any ) => {\n        //console.log('\uD83D\uDCE5 Received from server[data:RAW]')\n        let event\n        const frameData = parseWebSocketFrame( data )\n        try {\n          event = JSON.parse( frameData )\n        } catch( e ) {\n          // TODO: clean up non-text frames\n          //console.warn( e )\n          // event = frameData\n        }\n        this.emit( \"OCPP_EVENT\", event )\n      })\n      this.#link.on( \"end\", ( ...args:any ) => {\n        console.info(\"END\", ...args )\n      })\n      this.#link.on( \"close\", async ( ...args:any ) => {\n        console.info( \"close\", ...args )\n\n        if ( this.#linkError?.message?.includes( \"connect EHOSTUNREACH\" ) ){\n          this.#link = undefined\n          this.reconnect()\n          return\n        } else {\n          setTimeout(this.reconnect, this.centralSystemService?.reconnect?.timeout || 30000 )\n        }\n        \n        reject()\n      })\n      this.#link.on( \"error\", ( err:Error ) => {\n        console.error( err );\n        this.#linkError = err\n      })\n    })\n  }\n\n  async disconnect(): Promise<void> {\n    // Implement disconnect logic here\n  }\n\n  async reconnect(): Promise<void> {\n    // Implement strategy\n    if ( !this.centralSystemService.reconnect ){\n      throw new SyntaxError( \"Reconnects not defined\" )\n    }\n    if ( this.#reconnectCount > this.centralSystemService.reconnect.attempts ){\n      throw new Error(\"Max Reconnects\")\n    }\n    this.#reconnectCount = this.#reconnectCount + 1\n    console.log( `Reconnect Attempt with strategy[${this.centralSystemService.reconnect.strategy}]: ${this.#reconnectCount} of ${this.centralSystemService.reconnect.attempts}`)\n    await this.connect()\n  }\n  resetRetries():void {\n    //clear reconnect variables (soft reset)\n  }\n\n  isConnected(){\n    return !!this.#link\n  }\n  async sendMessage( method: string, payload?: IPayload ): Promise<void> {\n    if ( !this.#link ) {\n      throw `Cannot send message[ method: ${method}, payload: ${JSON.stringify(payload)}], not connected to Central System Service`\n    }\n    const { message } = new CallEnvelope( method, payload )\n    await this.#link.write( message )\n  }\n  async sendResponse( messageId: string, payload: IPayload ): Promise<void>{\n    if ( !this.#link ) {\n      throw `Cannot send response[ Id: ${messageId}, payload: ${JSON.stringify(payload)}], not connected to Central System Service`\n    }\n    const { message } = new ResponseEnvelope( messageId, payload )\n    await this.#link.write( message )\n  }\n}\nexport default OCPPTransport", "\"use strict\"\n\nexport enum EEvent {\n  BOOT_NOTIFICATION        = \"BootNotification\",\n  STATUS_NOTIFICATION      = \"StatusNotification\",\n  TRANSACTION_START        = \"TransactionStart\",\n  TRANSACTION_STOP         = \"TransactionStop\",\n  GET_DIAGNOSTICS          = \"GetDiagnostics\",\n  CHANGE_AVAILABILITY      = \"ChangeAvailability\",\n  REMOTE_START_TRANSACTION = \"RemoteStartTransaction\",\n  REMOTE_STOP_TRANSACTION  = \"RemoteStopTransaction\"\n}\nexport enum EReconnectStrategy {\n  \"LINEAR\"      = \"linear\",\n  \"PROGRESSIVE\" = \"progressive\",\n  \"FIBONACCI\"   = \"fibonacci\"\n}\nexport enum ETransportType {\n  \"OCPP1_6J\"  = \"ocpp1.6\",\n  \"OCPP2_0_1\" = \"ocpp2.0.1\"\n}\nexport enum EWebSocketProtocol {\n  \"WS\"  = \"ws\",\n  \"WSS\" = \"wss\"\n}\nexport enum EFTPProtocol {\n  \"FTP\"  = \"ftp\",\n  \"FTPS\" = \"ftps\"\n}\nexport enum ETLSVersions {\n  \"TLSv1\"   = \"TLSv1\",\n  \"TLSv1_2\" = \"TLSv1.2\",\n  \"TLSv1_3\" = \"TLSv1.3\"\n}", "\nimport { randomBytes } from \"crypto\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { ErrorMalformedMessage } from \"../utils\"\nimport { IPayload, IEnvelope } from \"./interfaces\"\n\nconst createWebSocketFrame = (message:string, opcode:number = 0x1 ):Buffer => {\n  const payload = Buffer.from(message, \"utf-8\");\n  const mask = randomBytes(4);\n  const maskedPayload = Buffer.alloc(payload.length);\n  for (let i = 0; i < payload.length; i++) {\n    maskedPayload[i] = payload[i] ^ mask[i % 4];\n  }\n\n  // Handle different payload lengths (up to 125, 126, 127 bytes)\n  let frameHeader;\n  if (payload.length <= 125) {\n    frameHeader = Buffer.alloc(2 + 4); // 2 bytes for header + 4 bytes for mask\n    frameHeader[1] = payload.length | 0x80; // Set masked bit\n  } else if (payload.length <= 0xFFFF) {\n    frameHeader = Buffer.alloc(4 + 4); // 4 bytes for extended payload length + 4 for mask\n    frameHeader[1] = 126 | 0x80; // Set masked bit and 126 for extended length\n    frameHeader.writeUInt16BE(payload.length, 2); // Write extended payload length\n  } else {\n    frameHeader = Buffer.alloc(10 + 4); // 10 bytes for long extended payload + 4 for mask\n    frameHeader[1] = 127 | 0x80; // Set masked bit and 127 for long length\n    frameHeader.writeBigUInt64BE(BigInt(payload.length), 2); // Write extended payload length (64-bit)\n  }\n\n  frameHeader[0] = opcode | 0x80; // Set FIN bit and opcode\n  mask.copy(frameHeader, frameHeader.length - 4); // Copy mask\n  return Buffer.concat([frameHeader, maskedPayload]);\n}\n\n// Frame handler for receiving WebSocket frames\nexport const parseWebSocketFrame = (frame: Buffer):string => {\n  const firstByte = frame[0];\n  const fin = (firstByte & 0x80) !== 0; // FIN bit\n  const opcode = firstByte & 0x0f; // Extract opcode (lower 4 bits)\n\n  const secondByte = frame[1];\n  const isMasked = (secondByte & 0x80) !== 0; // Masked bit\n  let payloadLength = secondByte & 0x7f; // Payload length (lower 7 bits)\n\n  let offset = 2;\n  if (payloadLength === 126) {\n    payloadLength = frame.readUInt16BE(2); // Extended 16-bit payload length\n    offset += 2;\n  } else if (payloadLength === 127) {\n    payloadLength = Number(frame.readBigUInt64BE(2)); // Extended 64-bit payload length\n    offset += 8;\n  }\n\n  // Handle masking\n  let mask;\n  if (isMasked) {\n    mask = frame.slice(offset, offset + 4); // Read the 4-byte mask\n    offset += 4;\n  }\n\n  const payload = Buffer.alloc(payloadLength);\n  for (let i = 0; i < payloadLength; i++) {\n    payload[i] = frame[offset + i] ^ (isMasked ? mask[i % 4] : 0); // Unmask if necessary\n  }\n\n  const message = payload.toString(\"utf-8\");\n\n  // Handle different opcodes\n  switch ( opcode ) {\n    case 0x0: console.log(\"Continuation frame:\", message);break;\n    case 0x1: return message;\n    case 0x2: console.log(\"Binary frame\");                break;\n    case 0x8: console.log(\"Close frame\");                 break;\n    case 0x9: console.log(\"Ping frame\");                  break;\n    case 0xA: console.log(\"Pong frame\");                  break;\n    default:\n      throw new ErrorMalformedMessage(`Unknown opcode: ${opcode}`);\n  }\n};\n\nconst formatOCPPMessage = ( method:string, payload:IPayload = {}, messageId = Math.random().toString(36).substring(2, 15) ):Buffer => {\n  const messageArr:any = [\n    2,\n    messageId,\n    method,\n    payload\n  ]\n  try {\n    if ( typeof messageArr !== \"object\" && !(messageArr instanceof Array) ) throw new ErrorMalformedMessage(\"must be of type 'object' and instance of Array. OCPP expects a list []\")\n    if ( messageArr.length !== 4 ) throw new ErrorMalformedMessage(\"message must be 4 items: [messageType, messageId, action, payload]\")\n    if ( typeof messageArr[ 0 ] !== \"number\" ) throw new ErrorMalformedMessage(\"message[0] must be of type 'number'\")\n    if ( typeof messageArr[ 1 ] !== \"string\") throw new ErrorMalformedMessage(\"message[1] must be of type 'string'\")\n    if ( typeof messageArr[ 2 ] !== \"string\" ) throw new ErrorMalformedMessage(\"message[2] must be of type 'string'\")\n  } catch ( e ) {\n    console.error( e.message, e.cause )\n  }\n  return createWebSocketFrame( JSON.stringify( messageArr ) )\n}\n\nconst formatOCPPResponse = ( messageId:string, payload:IPayload = {} ):Buffer => {\n  const messageArr:any = [\n    3,\n    messageId,\n    payload\n  ]\n  try {\n    if ( typeof messageArr !== \"object\" && !(messageArr instanceof Array) ) throw new ErrorMalformedMessage(\"must be of type 'object' and instance of Array. OCPP expects a list []\")\n    if ( messageArr.length !== 3 ) throw new ErrorMalformedMessage(\"response must be 3 items: [messageType, messageId, payload]\")\n    if ( typeof messageArr[ 0 ] !== \"number\" ) throw new ErrorMalformedMessage(\"message[0] must be of type 'number'\")\n    if ( typeof messageArr[ 1 ] !== \"string\") throw new ErrorMalformedMessage(\"message[1] must be of type 'string'\")\n  } catch ( e ) {\n    console.error( e.message, e.cause )\n  }\n  return createWebSocketFrame( JSON.stringify( messageArr ) )\n}\n\nexport class CallEnvelope implements IEnvelope {  \n  id:string = uuidv4()\n  text:string\n  message:Buffer\n  constructor( method:string, payload:IPayload = { timestamp: new Date().toISOString() } ) {\n    this.text = `[${method}]: ${JSON.stringify(payload)}`\n    this.message = formatOCPPMessage( method, payload )\n  }\n}\nexport class ResponseEnvelope implements IEnvelope {\n  id:string = uuidv4()\n  text:string\n  message:Buffer\n  constructor( messageId:string, payload:IPayload = { timestamp: new Date().toISOString() } ) {\n    this.id = messageId\n    this.text = `[${messageId}]: ${JSON.stringify(payload)}`\n    this.message = formatOCPPResponse( messageId, payload )\n  }\n}\n\n// export class ErrorEnvelope implements IEnvelope {\n//   id:string = uuidv4()\n//   text:string\n//   message:Buffer\n//   constructor( messageId:string, payload:IPayload = { timestamp: new Date().toISOString() } ) {\n//     this.id = messageId\n//     this.error = new Error(`[${messageId}]: ${JSON.stringify(payload)}`)\n//     this.message = formatOCPPError( messageId, payload )\n//   }\n// }", "import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;", "import crypto from 'node:crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import crypto from 'node:crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;", "\"use strict\"\n\nexport class ErrorMalformedMessage extends Error {\n  constructor( cause = \"\" ) {\n    super( `Message Malformed: `, { cause })\n  }\n}\nexport class StatusTransitionError extends Error {\n  constructor( oldStatus, newStatus ){\n    super( `Status Transition Error: Status[${oldStatus}] cannot transition to Status[${newStatus}]`, { cause: \"NewStatus !== OldStatus\" } )\n  }\n}", "\"use strict\"\n\nimport net from \"net\"\nimport { createReadStream } from \"fs\"\n\nimport {\n  IFTPTransport,\n  IFTPTransportOptions\n} from \"./interfaces\"\n\nconst parsePasvResponse = (pasvResponse: string): [string, number] => {\n  const match = pasvResponse.match(/(\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+)/);\n  if (!match) {\n    throw new Error('FTPTransport#parsePasvResponse: Invalid PASV response format.');\n  }\n  const ip = `${match[1]}.${match[2]}.${match[3]}.${match[4]}`;\n  const port = (parseInt(match[5]) * 256) + parseInt(match[6]);\n\n  return [ip, port];\n}\n\n\nexport class FTPTransport implements IFTPTransport {\n  #connectionConfiguration:IFTPTransportOptions = {\n    host    : \"localhost\",\n    port    : 21,\n    user    : \"\",\n    pass    : \"\",\n    secure  : false,\n    pasv    : true\n  }\n  #connection\n  #connected = false\n  uri:string = \"ftp://\"\n  constructor({\n    host   = \"localhost\",\n    port   = 21,\n    user   = \"\",\n    pass   = \"\",\n    secure = false,\n    pasv   = true\n  }:IFTPTransportOptions){\n    this.#connectionConfiguration = {\n      host, port, user, pass, secure, pasv\n    }\n    if ( user !== \"\" && pass === \"\" ) throw new SyntaxError(`FTPTransport::constructor:IFTPTransportOptions - Has [user] Missing[pass]`)\n    if ( pass !== \"\" && user === \"\" ) throw new SyntaxError(`FTPTransport::constructor:IFTPTransportOptions - Has [pass] Missing[user]`)\n    const credentialStr = user !== \"\" ? `${user}:${pass}@` : \"\"\n    const hostStr = port ? `${host}:${port}` : host \n    this.uri = `${!secure?\"ftp\":\"sftp\"}://${credentialStr}${hostStr}/`\n  }\n  connect(){\n    return new Promise( (resolve, reject ) =>{\n      this.#connection = net.createConnection({ host: this.#connectionConfiguration.host, port: this.#connectionConfiguration.port }, async () => {\n        await new Promise(() => (this.#connection.once( \"data\", () => { this.#connected = true } ),resolve(true)))\n      }).on(\"error\", reject )\n    })\n  }\n  #sendCommand = (command: string, expectedCode: string|undefined):Promise<string> =>\n    new Promise( (resolve, reject) => {\n      this.#connection.write(`${command}\\r\\n`);\n      this.#connection.on('data', data => {\n        const response = data.toString();\n        if (response.startsWith('5') || response.startsWith('4')) {\n          return reject(new Error(`FTP error[${command}]: ${response}`));\n        }\n\n        const code = response.slice(0, 3);\n        if (expectedCode && code !== expectedCode) {\n          console.debug(`Waiting for expected response code: ${expectedCode}, but got: ${code}`);\n          if ( !this.#connectionConfiguration.secure && code === \"SSH\" ){\n            this.end()\n            return reject( new Error(\"SSH Response\"));\n          }\n          return;\n        }\n        resolve(response);\n      });\n    });\n\n  async uploadFile(localPath, remotePath):Promise<{path:string}|void> {\n    if( !localPath || !remotePath){\n      throw new Error(`FTPTransport::uploadFile: Missing local[${localPath}] or remote[${remotePath}] path.`);\n    }\n    try {\n      await this.#sendCommand( `USER ${this.#connectionConfiguration.user}`, \"331\");\n      await this.#sendCommand( `PASS ${this.#connectionConfiguration.pass}`, \"230\");\n      await this.#sendCommand( `TYPE I`, \"200\");\n\n      let pasvResponse\n      if ( this.#connectionConfiguration.pasv ) {\n        pasvResponse = await this.#sendCommand( 'PASV', \"227\");\n      }\n      //console.log( \"pasv response:\", pasvResponse);\n\n      if (typeof pasvResponse !== 'string') {\n        throw new Error('FTPTransport::uploadFile: PASV response is not a string.');\n      }\n      const [host, port] = parsePasvResponse(pasvResponse);\n      const dataConnection = net.createConnection({ host, port });\n\n      await this.#sendCommand( `STOR ${remotePath}`, \"150\" )\n\n      await new Promise( ( resolve, reject ) => {\n        const fileStream = createReadStream(localPath);\n        fileStream.on( \"error\", reject );\n        fileStream.on( \"end\", async () => {\n          fileStream.close()\n          await this.#sendCommand( \"QUIT\", \"221\" )\n          resolve( true )\n        });\n        fileStream.pipe( dataConnection, { end: true } );\n      })\n\n      return { path: remotePath }\n    } catch (err) {\n      console.error( new Error( `Error during FTP upload: ${err.message}` ) )\n    }\n  }\n  end(){\n    this.#connection.end()\n    this.#connected = false\n  }\n}\nexport default FTPTransport", "import { EventEmitter, once } from \"events\"\nimport {\n  createCipheriv,\n  createDecipheriv,\n  createDiffieHellman,\n  createECDH,\n  createHash\n} from \"crypto\"\nimport { Socket } from \"net\"\nimport { readFileSync } from \"fs\"\n\nimport {\n  IFTPTransport,\n  IFTPTransportOptions\n} from \"./interfaces\"\n\nconst emitter = new EventEmitter()\n\nexport class SFTPTransport implements IFTPTransport {\n  #connectionConfiguration:IFTPTransportOptions = {\n    host    : \"localhost\",\n    port    : 22,\n    user    : \"\",\n    pass    : \"\"\n  }\n  #connection\n  #dh\n  #sharedSecret\n  #encryptionKey\n  #cipher\n  #decipher\n  uri:string = \"sftp://\"\n  /** \n  * @param {object} config - Configuration for SFTP connection.\n  * @param {string} config.host - The SFTP server host (default: localhost)\n  * @param {string} config.port - The SFTP server port (default: 22).\n  * @param {string} config.username - The SFTP username.\n  * @param {string} config.password - The SFTP password.\n  */\n  constructor({\n    host   = \"localhost\",\n    port   = 22,\n    user   = \"\",\n    pass   = \"\"\n  }:IFTPTransportOptions){\n    this.#connectionConfiguration = {\n      host, port, user, pass\n    }\n    if ( user !== \"\" && pass === \"\" ) throw new SyntaxError(`SFTPTransport::constructor:IFTPTransportOptions - Has [user] Missing[pass]`)\n    if ( pass !== \"\" && user === \"\" ) throw new SyntaxError(`SFTPTransport::constructor:IFTPTransportOptions - Has [pass] Missing[user]`)\n    const credentialStr = user !== \"\" ? `${user}:${pass}@` : \"\"\n    const hostStr = port ? `${host}:${port}` : host \n    this.uri = `sftp://${credentialStr}${hostStr}/`\n  }\n  async connect(){\n    this.#connection = new Socket()\n\n    await new Promise( ( resolve, reject ) => {\n      this.#connection.connect( this.#connectionConfiguration.port, this.#connectionConfiguration.host, resolve )\n      this.#connection.on( \"error\", reject)\n    })\n    \n    this.#connection.write( \"SSH-2.0-GenericClient_1.0\\r\\n\" )\n\n    const serverProtocol = await new Promise((resolve, reject) => {\n      let protocolBuffer = Buffer.alloc(0);\n      const timeout = setTimeout(() => {\n        this.#connection.off(\"data\", onData);\n        reject(new Error(\"Timeout waiting for full server protocol response\"));\n      }, 3000);\n\n      const onData = (data) => {\n        protocolBuffer = Buffer.concat([protocolBuffer, data]);\n\n        const protocolString = protocolBuffer.toString();\n        if (protocolString.includes('curve25519') || protocolString.includes('ecdh-sha2') || protocolString.includes('diffie-hellman')) {\n          clearTimeout(timeout);\n          this.#connection.off(\"data\", onData);\n          resolve(protocolString);\n        }\n      };\n\n      this.#connection.on(\"data\", onData);\n      this.#connection.on(\"error\", (error) => {\n        clearTimeout(timeout);\n        this.#connection.off(\"data\", onData);\n        reject(error);\n      });\n    });\n\n    console.log(\"Server Protocol:\", serverProtocol);\n\n    const supportedKexAlgorithms:string[] = serverProtocol.match(/curve25519|ecdh-sha2-nistp\\d+|diffie-hellman-group\\d+-sha\\d+/g) || [];\n    let clientKex;\n    let clientPublicKey;\n    \n    if (supportedKexAlgorithms.includes(\"ecdh-sha2-nistp256\")) {\n      console.debug(\"Using ecdh-sha2-nistp256 for key exchange\");\n      clientKex = createECDH(\"prime256v1\");\n      clientPublicKey = clientKex.generateKeys();\n    } else if (supportedKexAlgorithms.includes(\"ecdh-sha2-nistp384\")) {\n      console.debug(\"Using ecdh-sha2-nistp384 for key exchange\");\n      clientKex = createECDH(\"secp384r1\");\n      clientPublicKey = clientKex.generateKeys();\n    } else if (supportedKexAlgorithms.includes(\"ecdh-sha2-nistp521\")) {\n      console.debug(\"Using ecdh-sha2-nistp521 for key exchange\");\n      clientKex = createECDH(\"secp521r1\");\n      clientPublicKey = clientKex.generateKeys();\n    } else if (supportedKexAlgorithms.includes(\"diffie-hellman-group14-sha256\")) {\n      console.debug(\"Using diffie-hellman-group14-sha256 for key exchange\");\n      clientKex = createDiffieHellman(2048);\n      clientPublicKey = clientKex.generateKeys();\n    } else if (supportedKexAlgorithms.includes(\"diffie-hellman-group1-sha1\")) {\n      console.debug(\"Using diffie-hellman-group1-sha1 for key exchange\");\n      clientKex = createDiffieHellman(1024);\n      clientPublicKey = clientKex.generateKeys();\n    } else {\n      throw new Error(\"No compatible key exchange algorithm found\");\n    }\n\n    const serverPublicKey:Buffer = await new Promise( ( resolve, reject ) =>{\n      console.log( \"Promise Started\" )\n      let buffer = Buffer.alloc(0)\n      let retryCount = 0\n      const maxRetries = 5\n\n      const timeout = setTimeout(() => {\n        this.#connection.off(\"data\", onData)\n        reject( new Error( \"Timeout waiting for server public key\" ) )\n      }, 30000)\n\n      const onData = (key) => {\n        buffer = Buffer.concat([buffer, key])\n        if (buffer.length > 0) {\n          clearTimeout(timeout)\n          this.#connection.off(\"data\", onData)\n          resolve(buffer)\n        }\n      };\n\n      const sendClientKey = () => {\n        if (retryCount < maxRetries) {\n          console.log(`Sending client public key to server (Attempt ${retryCount + 1}/${maxRetries})...`);\n          this.#connection.write(clientPublicKey);\n          retryCount += 1;\n        } else {\n          clearInterval(retryInterval);\n          reject(new Error(\"Failed to receive server public key after multiple attempts\"));\n        }\n      };\n  \n      const retryInterval = setInterval(sendClientKey, 5000);\n      sendClientKey();\n\n      this.#connection.on(\"data\", onData);\n\n      this.#connection.on(\"error\", (error) => {\n        clearTimeout(timeout)\n        this.#connection.off(\"data\", onData)\n        reject(error)\n      });\n    })\n\n    console.log(\"SERVER PUBLIC KEY:\", serverPublicKey.toString())\n    this.#sharedSecret  = clientKex.computeSecret( serverPublicKey )\n    this.#encryptionKey = createHash( \"sha256\" ).update( this.#sharedSecret ).digest()\n    this.#cipher        = createCipheriv(\"aes-256-ctr\", this.#encryptionKey, Buffer.alloc(16, 0));\n    this.#decipher      = createDecipheriv( \"aes-256-ctr\", this.#encryptionKey, Buffer.alloc(16, 0));\n\n    this.#connection.on(\"data\", encryptedData => {\n      const decryptedBuffer = this.#decipher.update(encryptedData, \"hex\", \"utf8\") + this.#decipher.final(\"utf8\")\n\n      //const packetLength = decryptedBuffer.readUInt32BE(0)\n      const type = decryptedBuffer.readUInt8(4)\n\n      switch (type) {\n        case 102:{\n          const requestId = decryptedBuffer.readUInt32BE(5);      // Request ID (matches your OPEN request)\n          const handleLength = decryptedBuffer.readUInt32BE(9);   // Length of the handle string\n          const handle = decryptedBuffer.slice(13, 13 + handleLength).toString('utf8');  // File handle\n          console.log(`Request[${requestId}]BUFFER TO STRING: `, decryptedBuffer.toString())\n          return emitter.emit( \"fileHandle\", handle )\n        }\n        case 101:{ // SSH_FXP_STATUS\n          return this.#handleStatusResponse( decryptedBuffer )\n        }\n        default:\n          console.error('Unknown packet type:', type);\n      }\n    })\n\n    this.#authenticate()\n    this.#openSubsystem()\n  }\n  /**\n   * Uploads a file via SFTP using the system's sftp command.\n   * @param {string} localPath - The path to the local file.\n   * @param {string} remotePath - The destination path on the SFTP server.\n   * @returns {Promise<{path:string}|void>}\n   */\n  async uploadFile(localPath:string, remotePath:string):Promise<{path:string}|void>{\n    this.#init()\n    this.#openForWrite( remotePath )\n    const [ fileHandle ] = await once( emitter, \"fileHandle\")\n    this.#writeToFile( fileHandle, 0, readFileSync( localPath ) )\n    this.#closeWrite( fileHandle )\n  }\n\n  #writeEncrypted( data ):void {\n    if ( !this.#sharedSecret ) throw new Error( \"SFTPTransport#writeEncrypted: missing [sharedSecret]\")\n    if ( !this.#encryptionKey ) throw new Error( \"SFTPTransport#writeEncrypted: missing [encryptionKey]\")\n    if ( !this.#cipher ) throw new Error( \"SFTPTransport#writeEncrypted: missing [cipher]\")\n    if ( !this.#decipher ) throw new Error( \"SFTPTransport#writeEncrypted: missing [decipher]\")\n    this.#connection.write( this.#cipher.update(data, 'utf8', 'hex') + this.#cipher.final('hex'), 'hex' )\n  }\n\n  #authenticate(){\n    this.#writeEncrypted(\n      JSON.stringify({ type: \"USERAUTH_REQUEST\", username: this.#connectionConfiguration.user, password: this.#connectionConfiguration.pass, method: \"password\", service: \"ssh-connection\" })\n    )\n  }\n  #openSubsystem(){\n    //this.#writeEncrypted( JSON.stringify({ type: \"CHANNEL_REQUEST\", service: \"sftp\" }) )\n    const channelRequestBuffer = Buffer.alloc( 25 )\n    channelRequestBuffer.writeUInt32BE( 21, 0 )\n    channelRequestBuffer.writeUInt8( 98, 4 )\n    channelRequestBuffer.write( \"sftp\", 5, \"utf8\" )\n\n    this.#writeEncrypted( channelRequestBuffer )\n  }\n  //-------------\n  #init(){\n    const buff = Buffer.alloc(9)\n    buff.writeUInt32BE(5, 0)\n    buff.writeUInt8(1,4)\n    buff.writeUInt32BE(3, 5)\n    this.#writeEncrypted( buff )\n  }\n  #openForWrite( filename ){\n    const filenameBuffer = Buffer.from(filename, 'utf8')\n    const packetLength = 9 + filenameBuffer.length + 4\n    const buffer = Buffer.alloc(packetLength)\n\n    buffer.writeUInt32BE(packetLength - 4, 0)\n    buffer.writeUInt8(3, 4)\n    buffer.writeUInt32BE(1, 5)\n    buffer.writeUInt32BE(0x00000002, 9)\n    filenameBuffer.copy(buffer, 13)\n\n    this.#writeEncrypted(buffer)\n  }\n  #writeToFile(fileHandle, offset, data) {\n    const fileHandleBuffer = Buffer.from(fileHandle, 'utf8');\n    const dataBuffer = Buffer.from(data, 'utf8');\n    const packetLength = 17 + fileHandleBuffer.length + dataBuffer.length;\n    const buffer = Buffer.alloc(packetLength);\n  \n    buffer.writeUInt32BE(packetLength - 4, 0);\n    buffer.writeUInt8(6, 4);\n    buffer.writeUInt32BE(2, 5);\n    fileHandleBuffer.copy(buffer, 9);\n    buffer.writeBigUInt64BE(BigInt(offset), 9 + fileHandleBuffer.length);\n    dataBuffer.copy(buffer, 17 + fileHandleBuffer.length);\n\n    this.#writeEncrypted( buffer );\n  }\n  #closeWrite( fileHandle ){\n    const fileHandleBuffer = Buffer.from(fileHandle, 'utf8');\n    const packetLength = 9 + fileHandleBuffer.length;\n    const buffer = Buffer.alloc(packetLength);\n  \n    buffer.writeUInt32BE(packetLength - 4, 0);\n    buffer.writeUInt8(4, 4);\n    buffer.writeUInt32BE(3, 5);\n    fileHandleBuffer.copy(buffer, 9);\n  \n    this.#writeEncrypted(buffer);\n  }\n  #handleStatusResponse( buffer ){\n    const requestId = buffer.readUInt32BE(5);    // Request ID (matches your previous request)\n    const statusCode = buffer.readUInt32BE(9);   // Status code (e.g., 0 for success)\n  \n    if (statusCode === 0) {\n      console.log(`Request ${requestId} completed successfully.`);\n    } else {\n      const errorMessageLength = buffer.readUInt32BE(13);  // Length of the error message\n      const errorMessage = buffer.slice(17, 17 + errorMessageLength).toString('utf8');\n      console.error(`Error on request ${requestId}: ${errorMessage} (Code: ${statusCode})`);\n    }\n  }\n  #closeSubSytem(){\n    this.#writeEncrypted( JSON.stringify({ type: \"CHANNEL_CLOSE\", service: \"sftp\" }) )\n  }\n  #disconnect( reasonCode = 11, description = \"Client Disconnect\"){\n    const descriptionBuffer = Buffer.from(description, 'utf8');\n    const descriptionLength = descriptionBuffer.length;\n    const languageTagBuffer = Buffer.from('', 'utf8');\n    const languageTagLength = languageTagBuffer.length;\n  \n    const packetLength = 1 + 4 + 4 + descriptionLength + 4 + languageTagLength;\n    const buffer = Buffer.alloc(4 + packetLength);\n  \n    buffer.writeUInt32BE(packetLength, 0);\n    buffer.writeUInt8(1, 4);\n    buffer.writeUInt32BE(reasonCode, 5);\n    buffer.writeUInt32BE(descriptionLength, 9)\n    descriptionBuffer.copy(buffer, 13);  \n    buffer.writeUInt32BE(languageTagLength, 13 + descriptionLength);\n    languageTagBuffer.copy(buffer, 17 + descriptionLength);\n  \n    this.#writeEncrypted(buffer);\n  }\n  end(){\n    this.#closeSubSytem()\n    this.#disconnect()\n    this.#connection.end()\n  }\n}\n\nexport default SFTPTransport", "import { lstatSync, readFileSync, readdirSync } from 'fs'\n\nexport const readDeviceTree = ( nodePath:string , fullPath?: string ) =>\n  readdirSync( nodePath ).reduce( ( tree, node ) => (\n    fullPath = `${nodePath}/${node}`,\n    tree[ node ] = lstatSync( fullPath ).isDirectory() ? readDeviceTree( fullPath ) : readFileSync( fullPath, 'utf8' ),\n    tree\n  ), {})"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,WAAW;AACjB,IAAM,UAAU,MAAM;AAAC;AACvB,QAAQ,UAAU;AAAA,EAChB,KAAK;AAAS,YAAQ,OAAO;AAAA,EAC7B,KAAK;AAAS,YAAQ,QAAQ;AAAA,EAC9B,KAAK;AAAS,YAAQ,OAAO;AAAA,EAC7B,KAAK;AAAS,YAAQ,MAAM;AAAA,EAC5B,KAAK;AAAA,EACL;AAAS;AACX;;;ACTA,IAAAA,aAA2D;;;ACWpD,IAAM,mBAAN,MAA8C;AAAA,EACnD,eAA2B;AAAA,EAC3B,YAA2B;AAAA,EAC3B,UAA2B;AAAA,EAC3B,YAA2B;AAAA,EAC3B,gBAA2B;AAAA,EAC3B,mBAA2B;AAAA,EAC3B,WAA2B,CAAC;AAAA,EAC5B,aAA2B,CAAC;AAAA,EAC5B,wBAA2B;AAAA,IACzB,wBAAwB;AAAA,IACxB,wBAAwB;AAAA,IACxB,kBAAwB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAa,eAAyC;AACpD,WAAO,QAAS,aAAa,EAAE,QAAS,CAAE,CAAE,KAAK,GAAI,MAAO,KAAM,GAAI,IAAI,GAAI;AAAA,EAChF;AACF;;;ACzBO,IAAM,QAAN,MAA8B;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAoC,CAAC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAa,eAAoC;AAC/C,WAAO,QAAS,aAAc,EAAE,QAAS,CAAC,CAAC,KAAI,KAAK,MAAM,KAAK,GAAG,IAAE,KAAK;AAAA,EAC3E;AACF;AAEO,IAAM,aAAN,cAAyB,MAAM;AAAA,EACpC;AAAA,EACA,YAAa,eAAkD;AAC7D,UAAM,aAAa;AAAA,EACrB;AACF;AACO,IAAM,mBAAN,cAA+B,MAAM;AAAA,EAC1C;AAAA,EACA,YAAa,eAAkD;AAC7D,UAAM,aAAa;AAAA,EACrB;AACF;;;AC5BA,SAAS,WAAY,OAAO,YAAY,OAAO,GAAG;AAChD,SAAO,SAAW,aAAa;AAC7B,IAAC,YAAoB,SAAU,KAAM,EACpC,WAAkB,EAAE,aAAa,WACjC,WAAkB,EAAE,OAAO;AAAA,EAC9B;AACF;AAEO,IAAM,MAAN,MAAyB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP,aAAa;AAAA,EACb;AAAA,EACA;AAAA,EACA,UAAuB;AAAA,EACvB,YAAa,IAAI,MAAO,aAAe;AACrC,SAAK,KAAK;AACV,SAAK,OAAO,QAAQ;AACpB,SAAK,cAAc,eAAe;AAAA,EACpC;AAAA,EACA,SAAU,OAAqB;AAC7B,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,WAAmB;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,QAAc;AAChB,WAAS,KAAK,gCAA8B;AAAA,EAC9C;AAAA,EACA,IAAI,YAAkB;AACpB,WAAS,KAAK,0CAAmC;AAAA,EACnD;AAAA,EACA,IAAI,YAAkB;AACpB,WAAS,KAAK,0CAAmC;AAAA,EACnD;AAAA,EACA,KAAU;AACR,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,MAAW;AACT,SAAK,UAAU;AAAA,EACjB;AACF;AAGO,IAAM,SADb,CAAC,4BAAwB,GAAI,EACtB,cAAwB,IAAoB;AAAC;AAE7C,IAAM,WADb,CAAC,gCAA0B,GAAI,EACxB,cAAwB,IAAoB;AAAC;AAE7C,IAAM,UADb,CAAC,8BAAyB,GAAI,EACvB,cAAwB,IAAoB;AAAC;AAE7C,IAAM,YADb,CAAC,kCAA2B,CAAE,EACvB,cAAwB,IAAoB;AAAC;AAE7C,IAAM,WADb,CAAC,gCAA0B,KAAK,CAAE,EAC3B,cAAwB,IAAoB;AAAC;AAI7C,IAAM,gBAFb,CAAC,qCAA0B,GAAG,CAAE,EAEzB,cAA4B,IAAmB;AAAA,EACpD,IAAI,MAAe;AAAE,WAAS,KAAK,wBAAqB,GAAM;AAAA,EAAO;AAAA,EACrE,IAAI,OAAe;AAAE,WAAS,KAAK,0BAAsB,GAAK;AAAA,EAAO;AAAA,EACrE,IAAI,QAAe;AAAE,WAAS,KAAK,4BAAuB,GAAI;AAAA,EAAO;AAAA,EACrE,IAAI,SAAe;AAAE,WAAS,KAAK,8BAAwB,GAAG;AAAA,EAAO;AACvE;AAGA,SAAS,gBAAiB,OAAO,YAAY,OAAO,GAAG;AACrD,SAAO,SAAW,aAAa;AAC7B,IAAC,YAAoB,QAAQ,MAC5B,WAAkB,EAAE,aAAa,WACjC,WAAkB,EAAE,OAAO;AAAA,EAC9B;AACF;AACO,IAAM,WAAN,cAAuB,IAAoB;AAAA,EAChD,OAAO;AACT;AAGO,IAAM,cADb,CAAC,iCAA6B,CAAE,EACzB,cAAiC,SAAmC;AAAC;AAErE,IAAM,gBADb,CAAC,qCAA+B,CAAE,EAC3B,cAAiC,SAAmC;AAAC;AAErE,IAAM,iBADb,CAAC,uCAAgC,CAAE,EAC5B,cAAkC,SAAkC;AAAC;AAErE,IAAM,qBADb,CAAC,0CAA+B,CAAE,EAC3B,cAAiC,cAAmC;AAAC;;;AC1F5E;AAAA,EACE,MAAe;AAAA,EACf,SAAe;AAAA,EACf,aAAe;AAAA,EACf,QAAe;AAAA,EACf,SAAe;AAAA,EACf,SAAW;AAAA,IACT,MAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,UAAgB;AAAA,IAChB,OAAgB;AAAA,IAChB,UAAgB;AAAA,IAChB,OAAgB;AAAA,EAClB;AAAA,EACA,SAAW;AAAA,IACT,MAAQ;AAAA,IACR,KAAQ;AAAA,EACV;AAAA,EACA,cAAgB;AAAA,IACd,MAAQ;AAAA,EACV;AAAA,EACA,iBAAmB;AAAA,IACjB,cAAe;AAAA,IACf,eAAe;AAAA,IACf,wBAAwB;AAAA,IACxB,yCAAyC;AAAA,IACzC,8CAA8C;AAAA,IAC9C,wCAAwC;AAAA,IACxC,8CAA8C;AAAA,IAC9C,4CAA4C;AAAA,IAC5C,4CAA4C;AAAA,IAC5C,4CAA4C;AAAA,IAC5C,iDAAiD;AAAA,IACjD,uDAAuD;AAAA,IACvD,8CAA8C;AAAA,IAC9C,6CAA6C;AAAA,IAC7C,2CAA2C;AAAA,IAC3C,mCAAmC;AAAA,IACnC,sCAAsC;AAAA,IACtC,qBAAqB;AAAA,IACrB,4BAA4B;AAAA,IAC5B,mBAAmB;AAAA,IACnB,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,gCAAgC;AAAA,IAChC,sBAAsB;AAAA,IACtB,uBAAuB;AAAA,IACvB,MAAQ;AAAA,IACR,oBAAoB;AAAA,IACpB,SAAW;AAAA,IACX,QAAU;AAAA,IACV,yBAAyB;AAAA,IACzB,kBAAkB;AAAA,IAClB,OAAS;AAAA,IACT,QAAU;AAAA,IACV,OAAS;AAAA,IACT,OAAS;AAAA,IACT,yBAAyB;AAAA,IACzB,SAAW;AAAA,IACX,eAAe;AAAA,IACf,0BAA0B;AAAA,EAC5B;AACF;;;AC3DA,IAAAC,aAA8D;AAC9D,wBAA4B;;;ACF5B,IAAqB,SAArB,MAA4B;AAAA,EAC1B,eAAgB,MAAM;AACpB,QAAK,KAAK,WAAW,GAAG;AACtB,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACQO,IAAK,sBAAL,kBAAKC,yBAAL;AACL,EAAAA,qBAAA,2BAAwB;AACxB,EAAAA,qBAAA,sBAAwB;AACxB,EAAAA,qBAAA,yBAAwB;AAHd,SAAAA;AAAA,GAAA;AAKL,IAAK,yBAAL,kBAAKC,4BAAL;AACL,EAAAA,wBAAA,yBAAsB;AACtB,EAAAA,wBAAA,wBAAsB;AAFZ,SAAAA;AAAA,GAAA;AAgHL,IAAK,gBAAL,kBAAKC,mBAAL;AACL,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,iBAAc;AAJJ,SAAAA;AAAA,GAAA;;;ACzHL,IAAK,qBAAL,kBAAKC,wBAAL;AACL,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,WAAU;AACV,EAAAA,oBAAA,YAAU;AALA,SAAAA;AAAA,GAAA;;;ACTZ,oBAA6B;;;ACK7B,IAAqB,WAArB,MAA8B;AAAA;AAAA,EAC1B,KAAS;AAAA,EACT;AAAA,EACA,gBAAuC,EAAE,MAAM,aAAa,MAAM,MAAM,MAAM,IAAI;AAAA,EAClF,mBAAwC,OAAO,OAAO,kBAAkB;AAAA,EAExE,YAAa,QAA2B,eAAuC;AAC3E,QAAI,CAAC,KAAK,iBAAiB,SAAS,MAAM,GAAG;AACzC,YAAM,IAAI,MAAM,8BAA8B,MAAM,EAAE;AAAA,IAC1D;AACA,SAAK,SAAS;AACd,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,MAAM,aAAa;AACjB,SAAK,KAAK,MAAM,KAAK,cAAc;AACnC,QAAI,KAAK,WAAW,WAAW;AAC3B,YAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,YAAK,KAAK,IAAK;AACb,eAAK,GAAG;AAAA,YACJ;AAAA,YACA,CAAC,QAAQ;AACL,kBAAI,IAAK,QAAO,GAAG;AAAA,kBACd,SAAS,IAAK;AAAA,YACvB;AAAA,UACJ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAM,gBAAgB;AACpB,YAAQ,KAAK,QAAQ;AAAA,MACnB,KAAK;AACH,YAAI;AACF,gBAAM,UAAU,MAAM,OAAO,SAAS;AACtC,iBAAO,IAAI,QAAQ,SAAS,KAAK,cAAc,QAAQ,UAAU;AAAA,QACnE,SAAU,GAAI;AACZ,kBAAQ,KAAM,CAAE;AAAA,QAClB;AAAA,MACF,KAAK;AACH,YAAI;AACF,gBAAM,QAAQ,MAAM,OAAO,OAAO;AAClC,iBAAO,MAAM,QAAQ,KAAK,cAAc,QAAQ,WAAW;AAAA,QAC7D,SAAU,GAAI;AACZ,kBAAQ,KAAM,CAAE;AAAA,QAClB;AAAA,MACF,KAAK;AACH,YAAI;AACF,gBAAM,UAAU,MAAM,OAAO,SAAS;AACtC,iBAAO,QAAQ,KAAK,cAAc,QAAQ,WAAW;AAAA,QACvD,SAAU,GAAI;AACZ,kBAAQ,KAAM,CAAE;AAAA,QAClB;AAAA,MACF,KAAK;AACH,YAAI;AACF,gBAAM,QAAQ,MAAM,OAAO,OAAO;AAClC,gBAAM,SAAS,MAAM,aAAa;AAAA,YAC9B,KAAK,WAAW,KAAK,cAAc,QAAQ,WAAW,IAAI,KAAK,cAAc,QAAQ,IAAI;AAAA;AAAA,UAE7F,CAAC;AACD,gBAAM,OAAO,QAAQ;AACrB,iBAAO;AAAA,QACT,SAAU,GAAI;AACZ,kBAAQ,KAAM,CAAE;AAAA,QAClB;AAAA,MACF;AACE,cAAM,IAAI,MAAM,8BAA8B,KAAK,MAAM,EAAE;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,OAAO;AAChB,UAAM,WAAW,KAAK,UAAU,MAAM,OAAO;AAC7C,YAAQ,KAAK,QAAQ;AAAA,MACjB,KAAK;AACD,cAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnC,eAAK,GAAG,IAAI,4CAA4C,CAAC,MAAM,IAAI,QAAQ,GAAG,CAAC,QAAQ;AACnF,gBAAI,IAAK,QAAO,GAAG;AAAA,gBACd,SAAS,IAAK;AAAA,UACvB,CAAC;AAAA,QACL,CAAC;AACD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,cAAM,KAAK,GAAG,IAAI,MAAM,IAAI,QAAQ;AACpC;AAAA,MACJ,KAAK;AACD,cAAM,KAAK,GAAG,IAAI,MAAM,IAAI,QAAQ;AACpC;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAM,OAAO,OAAO;AAChB,YAAQ,KAAK,QAAQ;AAAA,MACjB,KAAK;AACD,cAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnC,eAAK,GAAG,IAAI,kCAAkC,CAAC,MAAM,EAAE,GAAG,CAAC,QAAQ;AAC/D,gBAAI,IAAK,QAAO,GAAG;AAAA,gBACd,SAAS,IAAK;AAAA,UACvB,CAAC;AAAA,QACL,CAAC;AACD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,cAAM,KAAK,GAAG,IAAI,MAAM,EAAE;AAC1B;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAM,WAAW;AACb,UAAM,SAAkB,CAAC;AACzB,YAAQ,KAAK,QAAQ;AAAA,MACjB,KAAK;AACD,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,eAAK,GAAG,IAAI,+CAA+C,CAAC,GAAG,CAAC,KAAK,SAAS;AAC1E,gBAAI,IAAK,QAAO,GAAG;AACnB,oBAAQ,KAAK,IAAI,SAAO;AACpB,oBAAM,QAAe,KAAK,MAAO,GAAI;AACrC,qBAAO,KAAM,KAAM;AAAA,YACvB,CAAC,CAAC;AAAA,UACN,CAAC;AAAA,QACL,CAAC;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,yBAAiB,CAAC,GAAG,KAAK,KAAK,KAAK,GAAG,SAAS,GAAG;AAC/C,gBAAM,QAAe,KAAK,MAAM,KAAK;AACrC,iBAAO,KAAM,KAAM;AAAA,QACvB;AACA,eAAO;AAAA,MACX,KAAK;AACD,cAAM,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG;AACnC,mBAAW,OAAO,MAAM;AACpB,gBAAM,QAAQ,MAAM,KAAK,GAAG,IAAI,GAAG;AACnC,gBAAM,QAAe,KAAK,MAAM,KAAK;AACrC,iBAAO,KAAM,KAAM;AAAA,QACvB;AACA,eAAO;AAAA,IACf;AAAA,EACJ;AACJ;;;AD9IO,IAAM,cAAN,MAAM,aAAmC;AAAA,EAC9C,QAAiC,CAAC;AAAA,EAClC;AAAA,EACA;AAAA,EACA,UAAiC,IAAI,2BAAa;AAAA,EAClD,SAAiC,CAAC;AAAA,EAClC,YAAY,EAAE,gCAAoC,MAAM,MAAM,MAAO,OAAO,GAAwB;AAClG,SAAK,SAAS;AACd,SAAK,cAAc,KAAK,gBAAgB;AACxC,QAAK,EAAE,gBAAgB,eAAe;AACpC,aAAO,IAAI,aAAa,UAAU,CAAC,CAAE;AAAA,IACvC;AACA,YAAQ,YAAY;AAClB,UAAK,kCAAqC;AACxC,gBAAQ,KAAM,wCAAyC;AAAA,MACzD,OAAO;AACL,YAAK,CAAC,MAAM;AACV,gBAAM,IAAI,MAAO,6BAA8B;AAAA,QACjD,WAAW,CAAC,MAAO;AACjB,gBAAM,IAAI,MAAO,6BAA8B;AAAA,QACjD,WAAY,CAAC,MAAO;AAClB,gBAAM,IAAI,MAAO,6BAA8B;AAAA,QACjD;AACA,cAAM,KAAK,MAAM,IAAI,SAAU,QAAQ,EAAE,MAAM,MAAM,KAAK,CAAE;AAC5D,YAAK,EAAE,cAAc,WAAY;AAC/B,kBAAQ,KAAK,qCAAqC;AAAA,QACpD,OAAO;AACL,eAAK,KAAK;AACV,cAAI;AACF,kBAAM,KAAK,GAAG,WAAW;AAAA,UAC3B,SAAU,GAAI;AACZ,oBAAQ,MAAO,CAAE;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT,GAAG;AAAA,EACL;AAAA,EACA,MAAM,UAAuB;AAC3B,QAAI;AACF,UAAI,KAAK,IAAI;AAAE,aAAK,MAAM,KAAM,GAAK,MAAM,KAAK,GAAG,SAAS,CAAI;AAAA,MAAE;AAAA,IACpE,SAAS,GAAG;AACV,cAAQ,MAAO,CAAE;AAAA,IACnB;AAAA,EACF;AAAA,EACA,CAAC,kBAA4B;AAC3B,WAAO,MAAM;AACX,YAAM,KAAK,MAAM,WAAW,IAAI,OAAO,KAAK,MAAM,MAAM;AAAA,IAC1D;AAAA,EACF;AAAA,EACA,MAAM,QAAS,OAAgC;AAC7C,QAAG;AACD,UAAI,KAAK,IAAI;AACX,cAAM,KAAK,GAAG,OAAO,KAAK;AAAA,MAC5B;AAAA,IACF,SAAU,GAAG;AACX,cAAQ,MAAO,CAAE;AAAA,IACnB,UAAE;AACA,WAAK,MAAM,KAAK,KAAK;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,MAAM,UAA0B;AAC9B,UAAM,QAAe,KAAK,YAAY,KAAK,EAAE;AAC7C,QAAG;AACD,eAAS,KAAK,KAAK,MAAM,KAAK,GAAG,OAAO,KAAK,IAAI;AAAA,IACnD,SAAU,GAAG;AACX,cAAQ,MAAO,CAAE;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AAAA,EACA,IAAI,SAAgB;AAClB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,GAAI,WAAmB,UAA+B;AACpD,SAAK,QAAQ,GAAI,WAAW,QAAS;AAAA,EACvC;AAAA,EACA,IAAK,WAAmB,UAA+B;AACrD,SAAK,QAAQ,IAAK,WAAW,QAAS;AAAA,EACxC;AAAA,EACA,MAAM,aAAc,QAAgB,SAAkC;AACpE,UAAM,QAAQ,KAAK,UAAU,EAAE,QAAQ,QAAO,CAAC;AAC/C,QAAI;AACF,YAAM,KAAK,QAAS,KAAM;AAC1B,WAAK,QAAQ,KAAM,gBAAgB,KAAM;AAAA,IAC3C,SAAU,GAAG;AACX,cAAQ,MAAO,CAAE;AAAA,IACnB;AAAA,EACF;AAAA,EACA,MAAM,eAAwD;AAC5D,UAAM,QAAQ,KAAK,MAAM,MAAM,KAAK,QAAQ,CAAC;AAC7C,QAAG;AACD,WAAK,QAAQ,KAAM,kBAAkB,KAAM;AAAA,IAC7C,SAAU,GAAG;AACX,cAAQ,MAAO,CAAE;AAAA,IACnB,UAAE;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AEjDO,IAAK,mBAAL,kBAAKC,sBAAL;AACL,EAAAA,kBAAA,eAAiB;AACjB,EAAAA,kBAAA,iBAAiB;AACjB,EAAAA,kBAAA,cAAiB;AACjB,EAAAA,kBAAA,cAAiB;AACjB,EAAAA,kBAAA,aAAiB;AACjB,EAAAA,kBAAA,cAAiB;AACjB,EAAAA,kBAAA,kBAAiB;AACjB,EAAAA,kBAAA,oBAAiB;AACjB,EAAAA,kBAAA,eAAiB;AATP,SAAAA;AAAA,GAAA;;;ACxDZ,IAAAC,iBAAmC;AAEnC,IAAqB,eAArB,cAA0C,4BAAa;AAAA,EACrD,QAAS,MAAO;AACd,6BAAM,MAAM,GAAG,IAAK;AACpB,WAAO;AAAA,EACT;AACF;;;ACsBO,IAAM,gBAAN,cAA4B,aAAqD;AAAA,EACtF;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAgD;AAAA;AAAA,EAChD,aAAgD;AAAA;AAAA,EAChD,cAAgD;AAAA;AAAA,EAChD,cAAgD;AAAA,EAChD,aAAgD;AAAA,EAChD,cAAgD;AAAA,EAChD;AAAA,EACA,aAAgD;AAAA,EAChD,YAAgD;AAAA,EAChD;AAAA,EACA;AAAA,EACA,cAAgD;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAa,eAAsC;AACjD,UAAM;AACN,WAAO,QAAS,aAAc,EACvB;AAAA,MACC,CAAE,CAAE,KAAK,KAAM,MAAO,KAAM,GAAI,IAAI;AAAA,IACtC;AAAA,EACR;AAAA,EACA,MAAM,UAAU;AACd,SAAK,cACD,QAAQ,IAAK,aAAc,OAAO,KAAK,OAAO,WAAW,KAAK,GAAG,cAAc,KAAK,EAAG,sBAAuB,KAC5G,KAAK,cAAc,MACnB,KAAK,2CACL,KAAK,4BAA+B,GACpC,QAAQ,IAAK,GAAG,KAAK,aAAa,qBAAqB;AAAA,EAC/D;AAAA,EAEA,MAAM,aAAa;AACjB,SAAK,eACA,KAAK,cAAc,OACnB,KAAK,+CACL,KAAK,aAAa,OAClB,KAAK,cAAc,GACnB,QAAQ,IAAI,GAAG,KAAK,aAAa,wBAAwB,KAC1D,QAAQ,IAAI,uBAAuB;AAAA,EACzC;AAAA,EAEA,MAAM,gBAAgB;AACpB,QAAI,CAAC,KAAK,aAAa;AACrB,YAAM;AAAA,IACR;AACA,QAAI,KAAK,YAAY;AACnB,YAAM;AAAA,IACR;AACA,SAAK,aAAa;AAClB,SAAK,cAAc,MAAM,KAAK,qBAAqB;AACnD,YAAQ,IAAI,uBAAuB,KAAK,YAAY,kBAAkB,KAAK,WAAW,KAAK;AAAA,EAC7F;AAAA,EAEA,MAAM,eAAe;AACnB,SAAK,cACA,KAAK,aAAa,OAClB,KAAK,cAAc,GACnB,QAAQ,IAAI,mBAAmB,KAChC,QAAQ,IAAI,0BAA0B;AAAA,EAC5C;AAAA;AAAA,EAGA,MAAM,uBAAuB;AAC3B,UAAM,YAAa,KAAK,aAAa,KAAK,aAAc;AACxD,WAAO,KAAK,2DACR,YAAY,MACZ,KAAK,6CACH,IACA;AAAA,EACR;AAAA;AAAA,EAGA,UAAU,KAAa;AACrB,SAAK,aAAa;AAClB,YAAQ,IAAI,sCAAsC,KAAK,UAAU,EAAE;AAAA,EACrE;AAAA;AAAA,EAGA,aAAa,WAAmB;AAC9B,SAAK,YAAY;AACjB,YAAQ,IAAI,iCAAiC,KAAK,SAAS,EAAE;AAAA,EAC/D;AAAA;AAAA,EAGA,eAAe,OAAe;AAC5B,SAAK,cAAc;AACnB,YAAQ,IAAI,4BAA4B,KAAK,WAAW,UAAU;AAAA,EACpE;AAAA;AAAA,EAGA,iBAAiB,QAAqB;AACpC,SAAK,aAAa;AAClB,YAAQ,IAAI,0BAA0B,KAAK,UAAU,EAAE;AAAA,EACzD;AAAA;AAAA,EAGA,wBAAwB,QAA+B;AACrD,SAAK,uBAAuB;AAC5B,YAAQ,IAAI,qCAAqC,KAAK,oBAAoB,EAAE;AAAA,EAC9E;AAAA,EAEA,YAAY;AACV,WAAO;AAAA,MACL,eAAe,KAAK;AAAA,MACpB,YAAY,KAAK;AAAA,MACjB,YAAY,KAAK;AAAA,MACjB,aAAa,KAAK;AAAA,MAClB,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,MACjB,aAAa,KAAK;AAAA,MAClB,iBAAiB,KAAK;AAAA,MACtB,YAAY,KAAK;AAAA,MACjB,WAAW,KAAK;AAAA,MAChB,cAAc,KAAK;AAAA,MACnB,uBAAuB,KAAK;AAAA,MAC5B,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,MACjB,sBAAsB,KAAK;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,aAAc,WAA6B;AACzC,QAAK,CAAC,OAAO,OAAQ,gBAAiB,EAAE,KAAM,UAAQ,SAAS,SAAU,GAAG;AAC1E,YAAM,IAAI,UAAU,qBAAqB,SAAS,+BAA+B,KAAK,EAAE,GAAG;AAAA,IAC7F;AACA,SAAK,SAAS;AAAA,EAChB;AACF;;;AC/JA,IAAAC,iBAA4B;AAC5B,iBAAsC;AACtC,iBAAsC;;;ACF/B,IAAK,SAAL,kBAAKC,YAAL;AACL,EAAAA,QAAA,uBAA2B;AAC3B,EAAAA,QAAA,yBAA2B;AAC3B,EAAAA,QAAA,uBAA2B;AAC3B,EAAAA,QAAA,sBAA2B;AAC3B,EAAAA,QAAA,qBAA2B;AAC3B,EAAAA,QAAA,yBAA2B;AAC3B,EAAAA,QAAA,8BAA2B;AAC3B,EAAAA,QAAA,6BAA2B;AARjB,SAAAA;AAAA,GAAA;;;ACDZ,oBAA4B;;;ACK5B,IAAM,YAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAClD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAM/C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACngB;;;ACjBA,yBAAmB;AACnB,IAAM,YAAY,IAAI,WAAW,GAAG;AACpC,IAAI,UAAU,UAAU;AACT,SAAR,MAAuB;AAC5B,MAAI,UAAU,UAAU,SAAS,IAAI;AACnC,uBAAAC,QAAO,eAAe,SAAS;AAC/B,cAAU;AAAA,EACZ;AACA,SAAO,UAAU,MAAM,SAAS,WAAW,EAAE;AAC/C;;;ACTA,IAAAC,sBAAmB;AACnB,IAAO,iBAAQ;AAAA,EACb,YAAY,oBAAAC,QAAO;AACrB;;;ACAA,SAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACzC,WAAO,eAAO,WAAW;AAAA,EAC3B;AACA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAGpD,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAC3B,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAG3B,MAAI,KAAK;AACP,aAAS,UAAU;AACnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AACA,SAAO,gBAAgB,IAAI;AAC7B;AACA,IAAO,aAAQ;;;ACtBR,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAC/C,YAAa,QAAQ,IAAK;AACxB,UAAO,uBAAuB,EAAE,MAAM,CAAC;AAAA,EACzC;AACF;;;ALAA,IAAM,uBAAuB,CAAC,SAAgB,SAAgB,MAAgB;AAC5E,QAAM,UAAU,OAAO,KAAK,SAAS,OAAO;AAC5C,QAAM,WAAO,2BAAY,CAAC;AAC1B,QAAM,gBAAgB,OAAO,MAAM,QAAQ,MAAM;AACjD,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAc,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC;AAAA,EAC5C;AAGA,MAAI;AACJ,MAAI,QAAQ,UAAU,KAAK;AACzB,kBAAc,OAAO,MAAM,IAAI,CAAC;AAChC,gBAAY,CAAC,IAAI,QAAQ,SAAS;AAAA,EACpC,WAAW,QAAQ,UAAU,OAAQ;AACnC,kBAAc,OAAO,MAAM,IAAI,CAAC;AAChC,gBAAY,CAAC,IAAI,MAAM;AACvB,gBAAY,cAAc,QAAQ,QAAQ,CAAC;AAAA,EAC7C,OAAO;AACL,kBAAc,OAAO,MAAM,KAAK,CAAC;AACjC,gBAAY,CAAC,IAAI,MAAM;AACvB,gBAAY,iBAAiB,OAAO,QAAQ,MAAM,GAAG,CAAC;AAAA,EACxD;AAEA,cAAY,CAAC,IAAI,SAAS;AAC1B,OAAK,KAAK,aAAa,YAAY,SAAS,CAAC;AAC7C,SAAO,OAAO,OAAO,CAAC,aAAa,aAAa,CAAC;AACnD;AAGO,IAAM,sBAAsB,CAAC,UAAyB;AAC3D,QAAM,YAAY,MAAM,CAAC;AACzB,QAAM,OAAO,YAAY,SAAU;AACnC,QAAM,SAAS,YAAY;AAE3B,QAAM,aAAa,MAAM,CAAC;AAC1B,QAAM,YAAY,aAAa,SAAU;AACzC,MAAI,gBAAgB,aAAa;AAEjC,MAAI,SAAS;AACb,MAAI,kBAAkB,KAAK;AACzB,oBAAgB,MAAM,aAAa,CAAC;AACpC,cAAU;AAAA,EACZ,WAAW,kBAAkB,KAAK;AAChC,oBAAgB,OAAO,MAAM,gBAAgB,CAAC,CAAC;AAC/C,cAAU;AAAA,EACZ;AAGA,MAAI;AACJ,MAAI,UAAU;AACZ,WAAO,MAAM,MAAM,QAAQ,SAAS,CAAC;AACrC,cAAU;AAAA,EACZ;AAEA,QAAM,UAAU,OAAO,MAAM,aAAa;AAC1C,WAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACtC,YAAQ,CAAC,IAAI,MAAM,SAAS,CAAC,KAAK,WAAW,KAAK,IAAI,CAAC,IAAI;AAAA,EAC7D;AAEA,QAAM,UAAU,QAAQ,SAAS,OAAO;AAGxC,UAAS,QAAS;AAAA,IAChB,KAAK;AAAK,cAAQ,IAAI,uBAAuB,OAAO;AAAE;AAAA,IACtD,KAAK;AAAK,aAAO;AAAA,IACjB,KAAK;AAAK,cAAQ,IAAI,cAAc;AAAkB;AAAA,IACtD,KAAK;AAAK,cAAQ,IAAI,aAAa;AAAmB;AAAA,IACtD,KAAK;AAAK,cAAQ,IAAI,YAAY;AAAoB;AAAA,IACtD,KAAK;AAAK,cAAQ,IAAI,YAAY;AAAoB;AAAA,IACtD;AACE,YAAM,IAAI,sBAAsB,mBAAmB,MAAM,EAAE;AAAA,EAC/D;AACF;AAEA,IAAM,oBAAoB,CAAE,QAAe,UAAmB,CAAC,GAAG,YAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE,MAAc;AACpI,QAAM,aAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI;AACF,QAAK,OAAO,eAAe,YAAY,EAAE,sBAAsB,OAAS,OAAM,IAAI,sBAAsB,wEAAwE;AAChL,QAAK,WAAW,WAAW,EAAI,OAAM,IAAI,sBAAsB,oEAAoE;AACnI,QAAK,OAAO,WAAY,CAAE,MAAM,SAAW,OAAM,IAAI,sBAAsB,qCAAqC;AAChH,QAAK,OAAO,WAAY,CAAE,MAAM,SAAU,OAAM,IAAI,sBAAsB,qCAAqC;AAC/G,QAAK,OAAO,WAAY,CAAE,MAAM,SAAW,OAAM,IAAI,sBAAsB,qCAAqC;AAAA,EAClH,SAAU,GAAI;AACZ,YAAQ,MAAO,EAAE,SAAS,EAAE,KAAM;AAAA,EACpC;AACA,SAAO,qBAAsB,KAAK,UAAW,UAAW,CAAE;AAC5D;AAEA,IAAM,qBAAqB,CAAE,WAAkB,UAAmB,CAAC,MAAc;AAC/E,QAAM,aAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI;AACF,QAAK,OAAO,eAAe,YAAY,EAAE,sBAAsB,OAAS,OAAM,IAAI,sBAAsB,wEAAwE;AAChL,QAAK,WAAW,WAAW,EAAI,OAAM,IAAI,sBAAsB,6DAA6D;AAC5H,QAAK,OAAO,WAAY,CAAE,MAAM,SAAW,OAAM,IAAI,sBAAsB,qCAAqC;AAChH,QAAK,OAAO,WAAY,CAAE,MAAM,SAAU,OAAM,IAAI,sBAAsB,qCAAqC;AAAA,EACjH,SAAU,GAAI;AACZ,YAAQ,MAAO,EAAE,SAAS,EAAE,KAAM;AAAA,EACpC;AACA,SAAO,qBAAsB,KAAK,UAAW,UAAW,CAAE;AAC5D;AAEO,IAAM,eAAN,MAAwC;AAAA,EAC7C,KAAY,WAAO;AAAA,EACnB;AAAA,EACA;AAAA,EACA,YAAa,QAAe,UAAmB,EAAE,YAAW,oBAAI,KAAK,GAAE,YAAY,EAAE,GAAI;AACvF,SAAK,OAAO,IAAI,MAAM,MAAM,KAAK,UAAU,OAAO,CAAC;AACnD,SAAK,UAAU,kBAAmB,QAAQ,OAAQ;AAAA,EACpD;AACF;AACO,IAAM,mBAAN,MAA4C;AAAA,EACjD,KAAY,WAAO;AAAA,EACnB;AAAA,EACA;AAAA,EACA,YAAa,WAAkB,UAAmB,EAAE,YAAW,oBAAI,KAAK,GAAE,YAAY,EAAE,GAAI;AAC1F,SAAK,KAAK;AACV,SAAK,OAAO,IAAI,SAAS,MAAM,KAAK,UAAU,OAAO,CAAC;AACtD,SAAK,UAAU,mBAAoB,WAAW,OAAQ;AAAA,EACxD;AACF;;;AF1HO,IAAM,gBAAN,cAA4B,aAAuC;AAAA,EACxE,SAAmB,OAAO,OAAQ,MAAO;AAAA,EACzC,uBAA6C;AAAA,IAC3C;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA,WAAW;AAAA,MACT;AAAA,MACA,SAAU;AAAA,MACV,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AAAA,EACA;AAAA,EACA,kBAAyB;AAAA,EACzB,YAAa,SAAiC;AAC5C,UAAM;AACN,SAAK,SAAS,QAAQ,SAAS,QAAQ,SAAS,KAAK;AAErD,SAAK,uBAAuB;AAAA,MAC1B,GAAG,QAAQ;AAAA,MACX,KAAK;AAAA,QACH,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,QAAQ,qBAAqB;AAAA,MAClC;AAAA,MACA,KAAK;AAAA,QACH,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,QAAQ,qBAAqB;AAAA,MAClC;AAAA,MACA,WAAW;AAAA,QACT,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,QAAQ,qBAAqB;AAAA,MAClC;AAAA,IACF;AAAA,EAIF;AAAA,EACA,MAAM,UAAyB;AAC7B,UAAM,EAAE,MAAM,MAAM,MAAM,UAAU,IAAI,IAA0B,KAAK;AACvE,QAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM;AAC5B,YAAM,IAAI,YAAY,qEAAqE;AAAA,IAC7F;AACA,WAAO,IAAI,QAAS,CAAE,SAAS,WAAY;AACzC,YAAM,kBAAkB,YAAY;AAClC,gBAAQ,IAAI,GAAG,KAAK,UAAU,uBAAe,EAAE,sBAAsB;AACrE,aAAK,MAAM;AAAA,UAAM;AAAA,YACb,OAAO,IAAI;AAAA,YACX,SAAS,IAAI,IAAI,IAAI;AAAA,YACrB;AAAA,YACA;AAAA,YACA,0BAAsB,4BAAY,EAAE,EAAE,SAAS,QAAQ,CAAC;AAAA,YACxD;AAAA,YACA,2BAA2B,KAAK,qBAAqB,IAAI;AAAA,UAC3D,EACC,IAAK,YAAU,OAAO,KAAK,QAAQ,OAAO,EAAE,SAAS,OAAO,CAAE,EAC9D,KAAK,MAAM,IAAI;AAAA,QAClB;AACA,aAAK,kBAAkB;AACvB,aAAK,aAAa;AAClB,gBAAQ;AAAA,MACV;AACA,cAAQ,IAAI,QAAQ,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AACzC,YAAM,iBAAiB;AAAA,QACrB;AAAA,QAAM;AAAA,MACR,GAAG,oBAAoB;AAAA,QACrB,GAAG;AAAA,QACH;AAAA,QAAU,IAAI,KAAK;AAAA,QACnB,oBAAoB;AAAA,QACpB,WAAW;AAAA,MACb;AACA,WAAK,QAAQ,CAAC,KAAK,cACH,WAAAC,SAAY,gBAAgB,eAAe,QAC3C,WAAAC,SAAY,mBAAmB,eAAgB;AAE/D,WAAK,MAAM,GAAG,QAAQ,CAAE,SAAe;AAErC,YAAI;AACJ,cAAM,YAAY,oBAAqB,IAAK;AAC5C,YAAI;AACF,kBAAQ,KAAK,MAAO,SAAU;AAAA,QAChC,SAAS,GAAI;AAAA,QAIb;AACA,aAAK,KAAM,cAAc,KAAM;AAAA,MACjC,CAAC;AACD,WAAK,MAAM,GAAI,OAAO,IAAK,SAAc;AACvC,gBAAQ,KAAK,OAAO,GAAG,IAAK;AAAA,MAC9B,CAAC;AACD,WAAK,MAAM,GAAI,SAAS,UAAW,SAAc;AAC/C,gBAAQ,KAAM,SAAS,GAAG,IAAK;AAE/B,YAAK,KAAK,YAAY,SAAS,SAAU,sBAAuB,GAAG;AACjE,eAAK,QAAQ;AACb,eAAK,UAAU;AACf;AAAA,QACF,OAAO;AACL,qBAAW,KAAK,WAAW,KAAK,sBAAsB,WAAW,WAAW,GAAM;AAAA,QACpF;AAEA,eAAO;AAAA,MACT,CAAC;AACD,WAAK,MAAM,GAAI,SAAS,CAAE,QAAe;AACvC,gBAAQ,MAAO,GAAI;AACnB,aAAK,aAAa;AAAA,MACpB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,aAA4B;AAAA,EAElC;AAAA,EAEA,MAAM,YAA2B;AAE/B,QAAK,CAAC,KAAK,qBAAqB,WAAW;AACzC,YAAM,IAAI,YAAa,wBAAyB;AAAA,IAClD;AACA,QAAK,KAAK,kBAAkB,KAAK,qBAAqB,UAAU,UAAU;AACxE,YAAM,IAAI,MAAM,gBAAgB;AAAA,IAClC;AACA,SAAK,kBAAkB,KAAK,kBAAkB;AAC9C,YAAQ,IAAK,mCAAmC,KAAK,qBAAqB,UAAU,QAAQ,MAAM,KAAK,eAAe,OAAO,KAAK,qBAAqB,UAAU,QAAQ,EAAE;AAC3K,UAAM,KAAK,QAAQ;AAAA,EACrB;AAAA,EACA,eAAoB;AAAA,EAEpB;AAAA,EAEA,cAAa;AACX,WAAO,CAAC,CAAC,KAAK;AAAA,EAChB;AAAA,EACA,MAAM,YAAa,QAAgB,SAAoC;AACrE,QAAK,CAAC,KAAK,OAAQ;AACjB,YAAM,gCAAgC,MAAM,cAAc,KAAK,UAAU,OAAO,CAAC;AAAA,IACnF;AACA,UAAM,EAAE,QAAQ,IAAI,IAAI,aAAc,QAAQ,OAAQ;AACtD,UAAM,KAAK,MAAM,MAAO,OAAQ;AAAA,EAClC;AAAA,EACA,MAAM,aAAc,WAAmB,SAAkC;AACvE,QAAK,CAAC,KAAK,OAAQ;AACjB,YAAM,6BAA6B,SAAS,cAAc,KAAK,UAAU,OAAO,CAAC;AAAA,IACnF;AACA,UAAM,EAAE,QAAQ,IAAI,IAAI,iBAAkB,WAAW,OAAQ;AAC7D,UAAM,KAAK,MAAM,MAAO,OAAQ;AAAA,EAClC;AACF;;;AQhKA,IAAAC,cAAgB;AAChB,gBAAiC;AAOjC,IAAM,oBAAoB,CAAC,iBAA2C;AACpE,QAAM,QAAQ,aAAa,MAAM,qCAAqC;AACtE,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MAAM,+DAA+D;AAAA,EACjF;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;AAC1D,QAAM,OAAQ,SAAS,MAAM,CAAC,CAAC,IAAI,MAAO,SAAS,MAAM,CAAC,CAAC;AAE3D,SAAO,CAAC,IAAI,IAAI;AAClB;AAGO,IAAM,eAAN,MAA4C;AAAA,EACjD,2BAAgD;AAAA,IAC9C,MAAU;AAAA,IACV,MAAU;AAAA,IACV,MAAU;AAAA,IACV,MAAU;AAAA,IACV,QAAU;AAAA,IACV,MAAU;AAAA,EACZ;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb,MAAa;AAAA,EACb,YAAY;AAAA,IACV,OAAS;AAAA,IACT,OAAS;AAAA,IACT,OAAS;AAAA,IACT,OAAS;AAAA,IACT,SAAS;AAAA,IACT,OAAS;AAAA,EACX,GAAuB;AACrB,SAAK,2BAA2B;AAAA,MAC9B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAQ;AAAA,IAClC;AACA,QAAK,SAAS,MAAM,SAAS,GAAK,OAAM,IAAI,YAAY,2EAA2E;AACnI,QAAK,SAAS,MAAM,SAAS,GAAK,OAAM,IAAI,YAAY,2EAA2E;AACnI,UAAM,gBAAgB,SAAS,KAAK,GAAG,IAAI,IAAI,IAAI,MAAM;AACzD,UAAM,UAAU,OAAO,GAAG,IAAI,IAAI,IAAI,KAAK;AAC3C,SAAK,MAAM,GAAG,CAAC,SAAO,QAAM,MAAM,MAAM,aAAa,GAAG,OAAO;AAAA,EACjE;AAAA,EACA,UAAS;AACP,WAAO,IAAI,QAAS,CAAC,SAAS,WAAW;AACvC,WAAK,cAAc,YAAAC,QAAI,iBAAiB,EAAE,MAAM,KAAK,yBAAyB,MAAM,MAAM,KAAK,yBAAyB,KAAK,GAAG,YAAY;AAC1I,cAAM,IAAI,QAAQ,OAAO,KAAK,YAAY,KAAM,QAAQ,MAAM;AAAE,eAAK,aAAa;AAAA,QAAK,CAAE,GAAE,QAAQ,IAAI,EAAE;AAAA,MAC3G,CAAC,EAAE,GAAG,SAAS,MAAO;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EACA,eAAe,CAAC,SAAiB,iBAC/B,IAAI,QAAS,CAAC,SAAS,WAAW;AAChC,SAAK,YAAY,MAAM,GAAG,OAAO;AAAA,CAAM;AACvC,SAAK,YAAY,GAAG,QAAQ,UAAQ;AAClC,YAAM,WAAW,KAAK,SAAS;AAC/B,UAAI,SAAS,WAAW,GAAG,KAAK,SAAS,WAAW,GAAG,GAAG;AACxD,eAAO,OAAO,IAAI,MAAM,aAAa,OAAO,MAAM,QAAQ,EAAE,CAAC;AAAA,MAC/D;AAEA,YAAM,OAAO,SAAS,MAAM,GAAG,CAAC;AAChC,UAAI,gBAAgB,SAAS,cAAc;AACzC,gBAAQ,MAAM,uCAAuC,YAAY,cAAc,IAAI,EAAE;AACrF,YAAK,CAAC,KAAK,yBAAyB,UAAU,SAAS,OAAO;AAC5D,eAAK,IAAI;AACT,iBAAO,OAAQ,IAAI,MAAM,cAAc,CAAC;AAAA,QAC1C;AACA;AAAA,MACF;AACA,cAAQ,QAAQ;AAAA,IAClB,CAAC;AAAA,EACH,CAAC;AAAA,EAEH,MAAM,WAAW,WAAW,YAAwC;AAClE,QAAI,CAAC,aAAa,CAAC,YAAW;AAC5B,YAAM,IAAI,MAAM,2CAA2C,SAAS,eAAe,UAAU,SAAS;AAAA,IACxG;AACA,QAAI;AACF,YAAM,KAAK,aAAc,QAAQ,KAAK,yBAAyB,IAAI,IAAI,KAAK;AAC5E,YAAM,KAAK,aAAc,QAAQ,KAAK,yBAAyB,IAAI,IAAI,KAAK;AAC5E,YAAM,KAAK,aAAc,UAAU,KAAK;AAExC,UAAI;AACJ,UAAK,KAAK,yBAAyB,MAAO;AACxC,uBAAe,MAAM,KAAK,aAAc,QAAQ,KAAK;AAAA,MACvD;AAGA,UAAI,OAAO,iBAAiB,UAAU;AACpC,cAAM,IAAI,MAAM,0DAA0D;AAAA,MAC5E;AACA,YAAM,CAAC,MAAM,IAAI,IAAI,kBAAkB,YAAY;AACnD,YAAM,iBAAiB,YAAAA,QAAI,iBAAiB,EAAE,MAAM,KAAK,CAAC;AAE1D,YAAM,KAAK,aAAc,QAAQ,UAAU,IAAI,KAAM;AAErD,YAAM,IAAI,QAAS,CAAE,SAAS,WAAY;AACxC,cAAM,iBAAa,4BAAiB,SAAS;AAC7C,mBAAW,GAAI,SAAS,MAAO;AAC/B,mBAAW,GAAI,OAAO,YAAY;AAChC,qBAAW,MAAM;AACjB,gBAAM,KAAK,aAAc,QAAQ,KAAM;AACvC,kBAAS,IAAK;AAAA,QAChB,CAAC;AACD,mBAAW,KAAM,gBAAgB,EAAE,KAAK,KAAK,CAAE;AAAA,MACjD,CAAC;AAED,aAAO,EAAE,MAAM,WAAW;AAAA,IAC5B,SAAS,KAAK;AACZ,cAAQ,MAAO,IAAI,MAAO,4BAA4B,IAAI,OAAO,EAAG,CAAE;AAAA,IACxE;AAAA,EACF;AAAA,EACA,MAAK;AACH,SAAK,YAAY,IAAI;AACrB,SAAK,aAAa;AAAA,EACpB;AACF;;;AC3HA,IAAAC,iBAAmC;AACnC,IAAAC,iBAMO;AACP,IAAAC,cAAuB;AACvB,IAAAC,aAA6B;AAO7B,IAAM,UAAU,IAAI,4BAAa;AAE1B,IAAM,gBAAN,MAA6C;AAAA,EAClD,2BAAgD;AAAA,IAC9C,MAAU;AAAA,IACV,MAAU;AAAA,IACV,MAAU;AAAA,IACV,MAAU;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQb,YAAY;AAAA,IACV,OAAS;AAAA,IACT,OAAS;AAAA,IACT,OAAS;AAAA,IACT,OAAS;AAAA,EACX,GAAuB;AACrB,SAAK,2BAA2B;AAAA,MAC9B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,IACpB;AACA,QAAK,SAAS,MAAM,SAAS,GAAK,OAAM,IAAI,YAAY,4EAA4E;AACpI,QAAK,SAAS,MAAM,SAAS,GAAK,OAAM,IAAI,YAAY,4EAA4E;AACpI,UAAM,gBAAgB,SAAS,KAAK,GAAG,IAAI,IAAI,IAAI,MAAM;AACzD,UAAM,UAAU,OAAO,GAAG,IAAI,IAAI,IAAI,KAAK;AAC3C,SAAK,MAAM,UAAU,aAAa,GAAG,OAAO;AAAA,EAC9C;AAAA,EACA,MAAM,UAAS;AACb,SAAK,cAAc,IAAI,mBAAO;AAE9B,UAAM,IAAI,QAAS,CAAE,SAAS,WAAY;AACxC,WAAK,YAAY,QAAS,KAAK,yBAAyB,MAAM,KAAK,yBAAyB,MAAM,OAAQ;AAC1G,WAAK,YAAY,GAAI,SAAS,MAAM;AAAA,IACtC,CAAC;AAED,SAAK,YAAY,MAAO,+BAAgC;AAExD,UAAM,iBAAiB,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5D,UAAI,iBAAiB,OAAO,MAAM,CAAC;AACnC,YAAM,UAAU,WAAW,MAAM;AAC/B,aAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,eAAO,IAAI,MAAM,mDAAmD,CAAC;AAAA,MACvE,GAAG,GAAI;AAEP,YAAM,SAAS,CAAC,SAAS;AACvB,yBAAiB,OAAO,OAAO,CAAC,gBAAgB,IAAI,CAAC;AAErD,cAAM,iBAAiB,eAAe,SAAS;AAC/C,YAAI,eAAe,SAAS,YAAY,KAAK,eAAe,SAAS,WAAW,KAAK,eAAe,SAAS,gBAAgB,GAAG;AAC9H,uBAAa,OAAO;AACpB,eAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,kBAAQ,cAAc;AAAA,QACxB;AAAA,MACF;AAEA,WAAK,YAAY,GAAG,QAAQ,MAAM;AAClC,WAAK,YAAY,GAAG,SAAS,CAAC,UAAU;AACtC,qBAAa,OAAO;AACpB,aAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,eAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAED,YAAQ,IAAI,oBAAoB,cAAc;AAE9C,UAAM,yBAAkC,eAAe,MAAM,+DAA+D,KAAK,CAAC;AAClI,QAAI;AACJ,QAAI;AAEJ,QAAI,uBAAuB,SAAS,oBAAoB,GAAG;AACzD,cAAQ,MAAM,2CAA2C;AACzD,sBAAY,2BAAW,YAAY;AACnC,wBAAkB,UAAU,aAAa;AAAA,IAC3C,WAAW,uBAAuB,SAAS,oBAAoB,GAAG;AAChE,cAAQ,MAAM,2CAA2C;AACzD,sBAAY,2BAAW,WAAW;AAClC,wBAAkB,UAAU,aAAa;AAAA,IAC3C,WAAW,uBAAuB,SAAS,oBAAoB,GAAG;AAChE,cAAQ,MAAM,2CAA2C;AACzD,sBAAY,2BAAW,WAAW;AAClC,wBAAkB,UAAU,aAAa;AAAA,IAC3C,WAAW,uBAAuB,SAAS,+BAA+B,GAAG;AAC3E,cAAQ,MAAM,sDAAsD;AACpE,sBAAY,oCAAoB,IAAI;AACpC,wBAAkB,UAAU,aAAa;AAAA,IAC3C,WAAW,uBAAuB,SAAS,4BAA4B,GAAG;AACxE,cAAQ,MAAM,mDAAmD;AACjE,sBAAY,oCAAoB,IAAI;AACpC,wBAAkB,UAAU,aAAa;AAAA,IAC3C,OAAO;AACL,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAEA,UAAM,kBAAyB,MAAM,IAAI,QAAS,CAAE,SAAS,WAAW;AACtE,cAAQ,IAAK,iBAAkB;AAC/B,UAAI,SAAS,OAAO,MAAM,CAAC;AAC3B,UAAI,aAAa;AACjB,YAAM,aAAa;AAEnB,YAAM,UAAU,WAAW,MAAM;AAC/B,aAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,eAAQ,IAAI,MAAO,uCAAwC,CAAE;AAAA,MAC/D,GAAG,GAAK;AAER,YAAM,SAAS,CAAC,QAAQ;AACtB,iBAAS,OAAO,OAAO,CAAC,QAAQ,GAAG,CAAC;AACpC,YAAI,OAAO,SAAS,GAAG;AACrB,uBAAa,OAAO;AACpB,eAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,kBAAQ,MAAM;AAAA,QAChB;AAAA,MACF;AAEA,YAAM,gBAAgB,MAAM;AAC1B,YAAI,aAAa,YAAY;AAC3B,kBAAQ,IAAI,gDAAgD,aAAa,CAAC,IAAI,UAAU,MAAM;AAC9F,eAAK,YAAY,MAAM,eAAe;AACtC,wBAAc;AAAA,QAChB,OAAO;AACL,wBAAc,aAAa;AAC3B,iBAAO,IAAI,MAAM,6DAA6D,CAAC;AAAA,QACjF;AAAA,MACF;AAEA,YAAM,gBAAgB,YAAY,eAAe,GAAI;AACrD,oBAAc;AAEd,WAAK,YAAY,GAAG,QAAQ,MAAM;AAElC,WAAK,YAAY,GAAG,SAAS,CAAC,UAAU;AACtC,qBAAa,OAAO;AACpB,aAAK,YAAY,IAAI,QAAQ,MAAM;AACnC,eAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAED,YAAQ,IAAI,sBAAsB,gBAAgB,SAAS,CAAC;AAC5D,SAAK,gBAAiB,UAAU,cAAe,eAAgB;AAC/D,SAAK,qBAAiB,2BAAY,QAAS,EAAE,OAAQ,KAAK,aAAc,EAAE,OAAO;AACjF,SAAK,cAAiB,+BAAe,eAAe,KAAK,gBAAgB,OAAO,MAAM,IAAI,CAAC,CAAC;AAC5F,SAAK,gBAAiB,iCAAkB,eAAe,KAAK,gBAAgB,OAAO,MAAM,IAAI,CAAC,CAAC;AAE/F,SAAK,YAAY,GAAG,QAAQ,mBAAiB;AAC3C,YAAM,kBAAkB,KAAK,UAAU,OAAO,eAAe,OAAO,MAAM,IAAI,KAAK,UAAU,MAAM,MAAM;AAGzG,YAAM,OAAO,gBAAgB,UAAU,CAAC;AAExC,cAAQ,MAAM;AAAA,QACZ,KAAK,KAAI;AACP,gBAAM,YAAY,gBAAgB,aAAa,CAAC;AAChD,gBAAM,eAAe,gBAAgB,aAAa,CAAC;AACnD,gBAAM,SAAS,gBAAgB,MAAM,IAAI,KAAK,YAAY,EAAE,SAAS,MAAM;AAC3E,kBAAQ,IAAI,WAAW,SAAS,uBAAuB,gBAAgB,SAAS,CAAC;AACjF,iBAAO,QAAQ,KAAM,cAAc,MAAO;AAAA,QAC5C;AAAA,QACA,KAAK,KAAI;AACP,iBAAO,KAAK,sBAAuB,eAAgB;AAAA,QACrD;AAAA,QACA;AACE,kBAAQ,MAAM,wBAAwB,IAAI;AAAA,MAC9C;AAAA,IACF,CAAC;AAED,SAAK,cAAc;AACnB,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,WAAkB,YAA8C;AAC/E,SAAK,MAAM;AACX,SAAK,cAAe,UAAW;AAC/B,UAAM,CAAE,UAAW,IAAI,UAAM,qBAAM,SAAS,YAAY;AACxD,SAAK,aAAc,YAAY,OAAG,yBAAc,SAAU,CAAE;AAC5D,SAAK,YAAa,UAAW;AAAA,EAC/B;AAAA,EAEA,gBAAiB,MAAY;AAC3B,QAAK,CAAC,KAAK,cAAgB,OAAM,IAAI,MAAO,sDAAsD;AAClG,QAAK,CAAC,KAAK,eAAiB,OAAM,IAAI,MAAO,uDAAuD;AACpG,QAAK,CAAC,KAAK,QAAU,OAAM,IAAI,MAAO,gDAAgD;AACtF,QAAK,CAAC,KAAK,UAAY,OAAM,IAAI,MAAO,kDAAkD;AAC1F,SAAK,YAAY,MAAO,KAAK,QAAQ,OAAO,MAAM,QAAQ,KAAK,IAAI,KAAK,QAAQ,MAAM,KAAK,GAAG,KAAM;AAAA,EACtG;AAAA,EAEA,gBAAe;AACb,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,MAAM,oBAAoB,UAAU,KAAK,yBAAyB,MAAM,UAAU,KAAK,yBAAyB,MAAM,QAAQ,YAAY,SAAS,iBAAiB,CAAC;AAAA,IACxL;AAAA,EACF;AAAA,EACA,iBAAgB;AAEd,UAAM,uBAAuB,OAAO,MAAO,EAAG;AAC9C,yBAAqB,cAAe,IAAI,CAAE;AAC1C,yBAAqB,WAAY,IAAI,CAAE;AACvC,yBAAqB,MAAO,QAAQ,GAAG,MAAO;AAE9C,SAAK,gBAAiB,oBAAqB;AAAA,EAC7C;AAAA;AAAA,EAEA,QAAO;AACL,UAAM,OAAO,OAAO,MAAM,CAAC;AAC3B,SAAK,cAAc,GAAG,CAAC;AACvB,SAAK,WAAW,GAAE,CAAC;AACnB,SAAK,cAAc,GAAG,CAAC;AACvB,SAAK,gBAAiB,IAAK;AAAA,EAC7B;AAAA,EACA,cAAe,UAAU;AACvB,UAAM,iBAAiB,OAAO,KAAK,UAAU,MAAM;AACnD,UAAM,eAAe,IAAI,eAAe,SAAS;AACjD,UAAM,SAAS,OAAO,MAAM,YAAY;AAExC,WAAO,cAAc,eAAe,GAAG,CAAC;AACxC,WAAO,WAAW,GAAG,CAAC;AACtB,WAAO,cAAc,GAAG,CAAC;AACzB,WAAO,cAAc,GAAY,CAAC;AAClC,mBAAe,KAAK,QAAQ,EAAE;AAE9B,SAAK,gBAAgB,MAAM;AAAA,EAC7B;AAAA,EACA,aAAa,YAAY,QAAQ,MAAM;AACrC,UAAM,mBAAmB,OAAO,KAAK,YAAY,MAAM;AACvD,UAAM,aAAa,OAAO,KAAK,MAAM,MAAM;AAC3C,UAAM,eAAe,KAAK,iBAAiB,SAAS,WAAW;AAC/D,UAAM,SAAS,OAAO,MAAM,YAAY;AAExC,WAAO,cAAc,eAAe,GAAG,CAAC;AACxC,WAAO,WAAW,GAAG,CAAC;AACtB,WAAO,cAAc,GAAG,CAAC;AACzB,qBAAiB,KAAK,QAAQ,CAAC;AAC/B,WAAO,iBAAiB,OAAO,MAAM,GAAG,IAAI,iBAAiB,MAAM;AACnE,eAAW,KAAK,QAAQ,KAAK,iBAAiB,MAAM;AAEpD,SAAK,gBAAiB,MAAO;AAAA,EAC/B;AAAA,EACA,YAAa,YAAY;AACvB,UAAM,mBAAmB,OAAO,KAAK,YAAY,MAAM;AACvD,UAAM,eAAe,IAAI,iBAAiB;AAC1C,UAAM,SAAS,OAAO,MAAM,YAAY;AAExC,WAAO,cAAc,eAAe,GAAG,CAAC;AACxC,WAAO,WAAW,GAAG,CAAC;AACtB,WAAO,cAAc,GAAG,CAAC;AACzB,qBAAiB,KAAK,QAAQ,CAAC;AAE/B,SAAK,gBAAgB,MAAM;AAAA,EAC7B;AAAA,EACA,sBAAuB,QAAQ;AAC7B,UAAM,YAAY,OAAO,aAAa,CAAC;AACvC,UAAM,aAAa,OAAO,aAAa,CAAC;AAExC,QAAI,eAAe,GAAG;AACpB,cAAQ,IAAI,WAAW,SAAS,0BAA0B;AAAA,IAC5D,OAAO;AACL,YAAM,qBAAqB,OAAO,aAAa,EAAE;AACjD,YAAM,eAAe,OAAO,MAAM,IAAI,KAAK,kBAAkB,EAAE,SAAS,MAAM;AAC9E,cAAQ,MAAM,oBAAoB,SAAS,KAAK,YAAY,WAAW,UAAU,GAAG;AAAA,IACtF;AAAA,EACF;AAAA,EACA,iBAAgB;AACd,SAAK,gBAAiB,KAAK,UAAU,EAAE,MAAM,iBAAiB,SAAS,OAAO,CAAC,CAAE;AAAA,EACnF;AAAA,EACA,YAAa,aAAa,IAAI,cAAc,qBAAoB;AAC9D,UAAM,oBAAoB,OAAO,KAAK,aAAa,MAAM;AACzD,UAAM,oBAAoB,kBAAkB;AAC5C,UAAM,oBAAoB,OAAO,KAAK,IAAI,MAAM;AAChD,UAAM,oBAAoB,kBAAkB;AAE5C,UAAM,eAAe,IAAI,IAAI,IAAI,oBAAoB,IAAI;AACzD,UAAM,SAAS,OAAO,MAAM,IAAI,YAAY;AAE5C,WAAO,cAAc,cAAc,CAAC;AACpC,WAAO,WAAW,GAAG,CAAC;AACtB,WAAO,cAAc,YAAY,CAAC;AAClC,WAAO,cAAc,mBAAmB,CAAC;AACzC,sBAAkB,KAAK,QAAQ,EAAE;AACjC,WAAO,cAAc,mBAAmB,KAAK,iBAAiB;AAC9D,sBAAkB,KAAK,QAAQ,KAAK,iBAAiB;AAErD,SAAK,gBAAgB,MAAM;AAAA,EAC7B;AAAA,EACA,MAAK;AACH,SAAK,eAAe;AACpB,SAAK,YAAY;AACjB,SAAK,YAAY,IAAI;AAAA,EACvB;AACF;;;AlBvRA,IAAM,SAAS,IAAI;AAAA;AAAwC;AAI3D,IAAM,kBAAkB,CAAC,YAAiB;AACxC,UAAQ,MAAO;AAAA,IACb,MAAK,CAAC,QAAQ,MAAM,OAAO,QAAQ,OAAO;AAAU,YAAM,YAAa,yEAA0E;AAAA,IACjJ,KAAK,CAAC,QAAQ;AAAsC,YAAM,YAAa,mFAAoF;AAAA,IAC3J,KAAK,QAAQ,WAAW,SAAS;AAAmB,aAAO,KAAM,qDAAqD;AAAA,IACpH;AAAS;AAAA,EACb;AACF;AAEO,IAAM,OAAN,MAAM,MAAsB;AAAA,EACjC;AAAA,EACA,aAA8B,CAAC;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAoB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAyB,CAAC;AAAA,EAC1B,cAAgC;AAAA,IAC9B,OAAO;AAAA,IACP;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA,gBAAoC;AAAA,IAClC,4BAAmC;AAAA,IACnC,2BAAmC;AAAA,IACnC,0BAAmC;AAAA,IACnC,mBAAmC;AAAA;AAAA,IACnC,yBAAmC;AAAA,IACnC,mBAAmC;AAAA;AAAA,IACnC,uBAAmC;AAAA,IACnC,mBAAmC;AAAA,IACnC,wBAAmC;AAAA,IACnC,0BAAmC;AAAA;AAAA,IACnC,oBAAmC;AAAA,IACnC,cAAmC;AAAA,IACnC,mCAAmC;AAAA,IACnC,4BAAmC;AAAA,EACrC;AAAA,EACA,KAA2B;AAAA,IACzB,UAAU;AAAA,MACR,SAAS,gBAAI;AAAA,MACb,kBAAkB;AAAA;AAAA,MAClB,iBAAiB;AAAA;AAAA,IACnB;AAAA,IACA,MAAK;AAAA;AAAA,IAEL;AAAA,IACA,aAAa;AAAA,MACX;AAAA,MACA,WAAW;AAAA,IACb;AAAA,IACA,oBAAoB;AAAA,EACtB;AAAA,EACA,eAA+C;AAAA,IAC7C,QAAsB;AAAA,IACtB,OAAsB;AAAA,IACtB;AAAA,IACA,WAAsB;AAAA,IACtB,aAAsB;AAAA,MACpB;AAAA,MACA,cAAc;AAAA,MACd,cAAc;AAAA,IAChB;AAAA,IACA,oBAAsB;AAAA,IACtB;AAAA,IACA,sBAAsB;AAAA,IACtB,cAAsB;AAAA,IACtB,cAAsB;AAAA,EACxB;AAAA,EACA,kBAAoC;AAAA,IAClC,aAA0B,CAAC;AAAA,IAC3B,YAA0B,CAAC;AAAA,IAC3B,iBAA0B,CAAC;AAAA,IAC3B,0BAA0B,CAAC;AAAA,IAC3B,MAA0B;AAAA,MACxB,YAAY,EAAE,OAAO,QAAW,QAAQ,QAAW,UAAU,OAAU;AAAA,IACzE;AAAA,IACA,gBAA0B;AAAA,MACxB,QAAS,CAAC;AAAA,MACV,KAAS,CAAC;AAAA,MACV,MAAS,CAAC;AAAA,MACV,KAAS,CAAC;AAAA,MACV,MAAS,CAAC;AAAA,MACV,MAAS,CAAC;AAAA,MACV,MAAS,CAAC;AAAA,MACV,UAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAAA,EAEA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAa,SAAsB;AACjC,oBAAiB,OAAQ;AACzB,SAAK,KAAK,QAAQ;AAClB,SAAK,eAAe,QAAQ;AAC5B,SAAK,aAAa,QAAQ,WAAW,OAAQ,eAAa,qBAAqB,aAAc,KAAwB,CAAC;AACtH,SAAK,kBAAkB,OAAO,QAAQ,cAAc,WAC5B,QAAQ,UAAU,OAAQ,eAAa,qBAAqB,aAAc,IAC1E,QAAQ,qBAAqB,gBAAgB,CAAE,QAAQ,SAAU,IAAI,CAAC;AAC9F,SAAK,iBAAiB,OAAO,QAAQ,cAAc,WAC3B,QAAQ,UAAU,OAAQ,eAAa,qBAAqB,gBAAgB,qBAAqB,aAAc,IAC/G,QAAQ,qBAAqB,eAAe,CAAE,QAAQ,SAAU,IAAI,CAAC;AAC7F,SAAK,gBAAgB,EAAE,GAAG,KAAK,eAAe,GAAG,QAAQ,cAAc;AACvE,SAAK,cAAc,EAAE,GAAG,KAAK,aAAa,GAAG,QAAQ,YAAY;AACjE,SAAK,KAAK,EAAE,GAAG,KAAK,IAAI,GAAG,QAAQ,GAAG;AACtC,SAAK,eAAe,EAAE,GAAG,KAAK,cAAc,GAAG,QAAQ,aAAa;AACpE,SAAK,kBAAkB,EAAE,GAAG,KAAK,iBAAiB,GAAG,QAAQ,gBAAgB;AAE7E,QAAK,EAAE,gBAAgB,QAAS;AAC9B,aAAO,IAAI,MAAM,OAAQ;AAAA,IAC3B;AACA,YAAQ,YAAW;AACjB,UAAI;AACF,cAAM,KAAK,kBAAkB;AAC7B,aAAK,SAAS;AACd,cAAM,KAAK,wBAAwB;AAAA,MACrC,SAAU,MAAO;AACf,gBAAQ,KAAM,IAAK;AAAA,MACrB;AACA,aAAO;AAAA,IACT,GAAG;AAAA,EACL;AAAA,EACA,MAAM,KAAM,QAAe,SAAkC;AAC3D,QAAI,WAAW;AACf,QAAI;AACF,iBAAY,aAAa,KAAK,iBAAkB;AAC9C,YAAK,CAAC,UAAU,YAAY,EAAI;AAChC,YAAI;AACF,gBAAM,UAAU,YAAa,QAAQ,OAAQ;AAC7C,qBAAW;AAAA,QACb,SAAS,GAAG;AACV,kBAAQ,MAAM,CAAC;AAAA,QACjB;AAAA,MACF;AACA,UAAK,aAAa,MAAQ,OAAM;AAAA,IAClC,SAAU,GAAI;AACZ,UAAK,KAAK,YAAY,iBAAiB;AACvC,aAAK,YAAY,MAAM,aAAc,QAAQ,OAAQ;AAAA,IACvD;AAAA,EACF;AAAA,EACA,WAAU;AACR,QAAI;AACF,WAAK,MAAM;AACX,WAAK,gBAAgB;AACrB,WAAK,kBAAkB;AAAA,IACzB,SAAU,GAAG;AACX,cAAQ,MAAO,CAAE;AACjB,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,MAAM,oBAAmB;AACvB,QAAK,CAAC,KAAK,aAAa;AACtB,aAAO,KAAM,6GAA8G;AAAA,IAC7H;AACA,UAAM,EAAE,QAAQ,MAAM,KAAK,IAAI,KAAK;AACpC,SAAK,YAAY,QAAQ,MAAM,IAAI,YAAa,EAAE,QAAQ,MAAM,KAAK,CAAE;AACvE,UAAM,KAAK,YAAY,MAAM,QAAQ;AAAA,EACvC;AAAA,EACA,MAAM,0BAAyB;AAC7B,eAAY,aAAa,KAAK,iBAAkB;AAC9C,YAAM,UAAU,QAAQ;AACxB,YAAM,KAAK,uBAAwB,SAAU;AAAA,IAC/C;AACA,WAAQ,KAAK,YAAY,SAAS,KAAK,YAAY,MAAM,SAAS,GAAG;AACnE,iBAAY,aAAa,KAAK,iBAAkB;AAC9C,cAAM,EAAE,QAAQ,QAAQ,IAAI,MAAM,KAAK,YAAY,MAAM,aAAa;AACtE,gBAAQ,IAAI,2BAA2B,QAAQ,OAAO;AACtD,cAAM,UAAU,YAAY,QAAQ,OAAQ;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,uBAAwB,WAAyB;AACrD,cAAU,GAAI,cAAc,OAAM,cAAa;AAC7C,UAAK,CAAC,UAAY;AAClB,UAAK,UAAU,qBAAqB,mCAAkC;AACpE,cAAM,CAAE,aAAa,WAAW,aAAa,YAAa,IAAI;AAE9D,gBAAQ,aAAa;AAAA,UACnB,6CAA4B;AAC1B,kBAAM,EAAE,SAAS,IAAI;AACrB,gBAAG;AACD,oBAAM,KAAK,iBAAiB,EAAE,SAAS,CAAC;AACxC,wBAAU,aAAc,WAAW,EAAE,QAAQ,YAAY,UAAU,SAAS,CAAE;AAAA,YAChF,SAAU,GAAI;AACZ,sBAAQ,MAAO,CAAE;AACjB,wBAAU,aAAc,WAAW,EAAE,QAAQ,WAAW,CAAE;AAAA,YAC5D;AACA;AAAA,UACF;AAAA,UACA,qDAAgC;AAC9B,kBAAM,EAAE,aAAAC,cAAa,KAAK,IAAI;AAC9B,gBAAI;AACF,oBAAM,KAAK,oBAAqBA,cAAa,IAAK;AAClD,wBAAU,aAAc,WAAW,EAAE,QAAQ,WAAW,CAAE;AAAA,YAC5D,SAAU,GAAI;AACZ,sBAAQ,MAAO,CAAE;AACjB,wBAAU,aAAc,WAAW,EAAE,QAAQ,WAAW,CAAE;AAAA,YAC5D;AACA;AAAA,UACF;AAAA,UACA,8DAAsC;AACpC,kBAAM;AAAA,cACJ;AAAA,cACA,aAAAA;AAAA,YACF,IAAI;AACJ,gBAAI;AACF,kBAAK,CAAC,MAAQ,OAAM,IAAI,MAAO,eAAe;AAC9C,kBAAK,CAACA,aAAc,OAAM,IAAI,MAAO,sBAAuB;AAC5D,oBAAM,KAAK,uBAAwB,OAAOA,YAAY;AAAA,YACxD,SAAU,GAAI;AACZ,wBAAU,aAAc,WAAW,EAAE,QAAQ,WAAW,CAAE;AAAA,YAC5D;AACA;AAAA,UACF;AAAA,UACA,4DAAqC;AAEnC;AAAA,UACF;AAAA,UACA;AAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,QAAO;AACL,SAAK;AAAA,MACH;AAAA,MACA;AAAA,QACE,mBAAyB,KAAK,aAAa;AAAA,QAC3C,kBAAyB,KAAK,aAAa;AAAA,QAC3C,yBAAyB,KAAK;AAAA;AAAA,QAC9B,uBAAyB,KAAK;AAAA;AAAA,QAC9B,iBAAyB,KAAK,GAAG,SAAS;AAAA;AAAA,QAC1C,OAAyB;AAAA;AAAA,QACzB,MAAyB;AAAA;AAAA,QACzB,WAAyB,KAAK,aAAa,YAAY;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAiB;AACf,gBAAY,MAAM;AAChB,WAAK,iBAAgB,oBAAI,KAAK,GAAE,YAAY;AAC5C,WAAK,KAAM,WAAY;AAAA,IACzB,GAAG,KAAK,cAAc,qBAAqB,QAAQ,IAAI,sBAAsB,IAAM;AACnF,SAAK,iBAAgB,oBAAI,KAAK,GAAE,YAAY;AAC5C,SAAK,KAAM,WAAY;AAAA,EACzB;AAAA,EACA,MAAM,WAAY,WAAsC,WAAmB,YAAmB;AAI5F,kCAAY,wDAA8C;AAE1D,UAAM,UAAU,QAAQ;AAExB,UAAM,qBAAqB,qBAAS,SAAS;AAE7C,SAAK,KAAM,gCAAgC;AAAA,MACzC;AAAA,MACA,UAAY;AAAA,MACZ,UAAY,eAAe;AAAA,MAC3B,MAAY,GAAG,UAAU,GAAG,GAAG,UAAU;AAAA,MACzC,YAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,MACnC,WACc,8BAAY,8CAA2C,GACvD,8BAAY;AAAA;AAAA;AAAA;AAAA,MAIZ,GACA,8BAAY,gEAA2D,EAAE,CAAC,EAAE;AAAA,MAE1F,YAAY;AAAA,IACd,CAAC;AACD,UAAM,UAAU,WAAY,WAAW,UAAW;AAClD,SAAK,KAAM,gCAAgC;AAAA,MACzC;AAAA,MACA,UAAY;AAAA,MACZ,UAAY,eAAe;AAAA,MAC3B,MAAY,GAAG,UAAU,GAAG,GAAG,UAAU;AAAA,MACzC,YAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,MACnC,WACE,8BAAY,oDAA6C,GACzD,8BAAY;AAAA;AAAA;AAAA;AAAA,MAIZ,GACA,8BAAY,8DAA0D,EAAE,CAAC,EAAE;AAAA,MAE7E,YAAY;AAAA,IACd,CAAC;AACD,UAAM,UAAU,IAAI;AACpB,WAAO,OAAQ,mBAAoB,EAAE,QAAS,UAAQ,8BAAY,WAAY,IAAK,CAAE;AACrF,WAAO,OAAQ,sBAAuB,EAAE,QAAS,aAAU,8BAAY,cAAe,OAAQ,CAAE;AAAA,EAClG;AAAA,EAEA,MAAM,iBAAiB,EAAE,UAAU,SAAS,UAAU,gBAAgB,cAAc,GAAsG;AAGxL,UAAM,QAAQ,SAAS;AAAA,MACX;AAAA,IACF;AACV,QAAK,CAAC,SAAS,KAAK,GAAG,KAAK,WAAW;AACrC,YAAM,IAAI,MAAM,+FAA+F;AACjH,QAAK,CAAC,SAAS,KAAK,eAAe,WAAW;AAC5C,YAAM,IAAI,MAAM,gHAAgH;AAElI,UACE,cAAc,KAAK,GAAG,KAAK,IAAI,CAAC,EAAC,MAAK,KAAI,MAAK;AAAA,UAAa,IAAI;AAAA,OAAc,yBAAa,IAAI,CAAC;AAAA;AAAA,CAA8B,EAAE,KAAK,IAAI,GACzI,kBAAkB,GAAG,KAAK,GAAG,kBAAkB,yBAAwB,oBAAI,KAAK,GAAE,YAAY,CAAE;AAElG,QAAI;AACF,oCAAe,iBAAiB,aAAa,EAAE,UAAU,QAAQ,CAAE;AAAA,IACrE,SAAU,GAAI;AACZ,aAAO,MAAO,oCAAoC,eAAe;AAAA,IACnE;AAEA,QAAK,OAAO;AACV,YAAM,CAAE,gBAAgB,gBAAgB,gBAAgB,gBAAgB,iBAAiB,aAAa,GAAI,IAAI,OAC5G,aAAa,gBAAgB,MAAM,CAAC,KAAK;AAC3C,UAAK,CAAC,eAAiB,OAAM,IAAI,YAAa,8DAA+D;AAC7G,UAAK,kBAAkB,CAAC,eAAiB,OAAM,IAAI,YAAa,yDAA0D;AAC1H,UAAK,CAAC,kBAAkB,eAAiB,OAAM,IAAI,YAAa,yDAA0D;AAC1H,YAAM,YAAY,kBAAkB,gBAAgB,YAAY,MAAM,SAChD,IAAI,cAAc;AAAA,QAChB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,MACR,CAAC,IACD,IAAI,aAAa;AAAA,QACf,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,MACR,CAAC;AACvB,YAAM,KAAK,WAAY,WAAW,iBAAiB,UAAW;AAAA,IAChE,OAAO;AACL,YAAM,QAAQ;AAAA,QACZ,KAAK,eAAe,IAAK,OAAQ,cAAe;AAC9C,cAAI,CAAC,UAAY,OAAM,IAAI,MAAO,4BAA6B;AAC/D,gBAAM,KAAK,WAAY,WAAW,iBAAiB,QAAS;AAAA,QAC9D,CAAC;AAAA,MACH;AAAA,IACF;AACA,UAAM,IAAI,QAAS,CAAE,SAAS,WAAY;AACxC,6BAAQ,iBAAiB,CAAE,QAAS,MAAM,OAAQ,GAAI,IAAI,QAAS,IAAK,CAAE;AAAA,IAC5E,CAAC;AAAA,EACH;AAAA,EACA,+BAA8B;AAC5B,SAAK,KAAM,0BAA0B;AAAA,MACnC,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAAA,EACA,oBAAyB;AACvB,SAAK;AAAA;AAAA,MAEH;AAAA,QACE,aAAa;AAAA,QACb,QAAa,KAAK;AAAA,QAClB,WAAa;AAAA,QACb,MAAa,gBAAgB,KAAK;AAAA,QAClC,YAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,MACtC;AAAA,IAAC;AACH,SAAK,WAAW,QAAS,CAAC,EAAE,IAAGA,cAAa,OAAO,MAAM;AACvD,cAAQ,IAAK,GAAGA,YAAW,KAAK,MAAM,EAAE;AACxC,WAAK;AAAA;AAAA,QAEH;AAAA,UACE,aAAAA;AAAA,UACA;AAAA,UACA,WAAW;AAAA,UACX,MAAW,cAAeA,YAAY,SAAS,MAAM;AAAA,UACrD,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QACpC;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,oBAAqBA,cAAqB,iBAAgC;AACxE,UAAM,wBAAwB;AAAA,MAC5B,gCAA0B;AAAA,MAC1B,4BAAwB;AAAA,IAC1B;AACA,QAAIA,iBAAgB,GAAI;AACtB,UAAK,CAAC,OAAO,OAAQ,aAAc,EAAE,KAAM,UAAQ,SAAS,eAAgB,GAAG;AAC7E,cAAM,IAAI,UAAU,qBAAqB,eAAe,wBAAyB;AAAA,MACnF;AACA,UAAK,KAAK,iBAAiB,iBAAkB;AAC3C,cAAM,IAAI,MAAO,kCAAkC,KAAK,YAAY,GAAI;AAAA,MAC1E;AACA,WAAK,eAAe,sBAAsB,eAAe;AAAA,IAC3D,OAAO;AACL,WAAK,WAAW,OAAQ,eAAa,UAAU,OAAOA,YAAY,EAAE,CAAC,EAAE,aAAc,sBAAuB,eAAgB,CAAE;AAAA,IAChI;AACA,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACA,MAAM,uBAAwB,OAAeA,cAAqB;AAChE,QAAK,KAAK,iDAA6C,OAAM,IAAI,MAAO,iCAAkC;AAE1G,UAAM,CAAE,SAAU,IAAqB,KAAK,WAAW,OAAQ,OAAK,EAAE,OAAOA,YAAY;AACzF,UAAM,sBAAsB,UAAU,UAAU;AAEhD,QAAK,CAAC,UAAgD,OAAM,IAAI,MAAO,yBAA0BA,YAAY,EAAE;AAC/G,QAAK,UAAU,mCAAuC,OAAM,IAAI,MAAO,8BAA+B;AACtG,QAAK,UAAU,qCAAuC,OAAM,IAAI,MAAO,+BAAgC;AACvG,QAAK,UAAU,qCAAuC,OAAM,IAAI,MAAO,+BAAgC;AAEvG,QAAK,oBAAoB,WAAa,OAAM,IAAI,MAAO,0CAA2C;AAElG,QAAK,CAAC,oBAAoB,aAAa;AAErC,YAAM,UAAU,KAAM,SAAU;AAAA,IAClC;AAqBA,UAAM,UAAU,cAAc;AAAA,EAChC;AACF;;;AmBxeA,IAAAC,aAAqD;AAE9C,IAAM,iBAAiB,CAAE,UAAkB,iBAChD,wBAAa,QAAS,EAAE,OAAQ,CAAE,MAAM,UACtC,WAAW,GAAG,QAAQ,IAAI,IAAI,IAC9B,KAAM,IAAK,QAAI,sBAAW,QAAS,EAAE,YAAY,IAAI,eAAgB,QAAS,QAAI,yBAAc,UAAU,MAAO,GACjH,OACC,CAAC,CAAC;;;AxBsBP,IAAM,aAAa,eAAgB,mBAAoB;AAAA,IACvD,0BAAe,oBAAoB,KAAK,UAAW,YAAY,MAAM,CAAE,CAAE;AAUzE,SAAS,aAAc,SAA+B;AACpD,SAAO;AAAA,IACL,aAAa,CAAC;AAAA,MACZ,cAAkB;AAAA,MAClB,WAAkB;AAAA,MAClB,SAAkB;AAAA,MAClB,WAAkB;AAAA,MAClB,eAAkB;AAAA,MAClB,MAAkB;AAAA,MAClB,UAAkB;AAAA,MAClB,kBAAkB;AAAA,IACpB,CAA6B;AAAA,IAC7B,QAAO,CAAC;AAAA,MACN,cAAiB;AAAA,MACjB;AAAA,MACA;AAAA,MACA,UAAiB,yFAAoF;AAAA,MACrG;AAAA,MACA,aAAiB;AAAA,MACjB;AAAA,MACA,aAAiB;AAAA,MACjB;AAAA,MACA,aAAiB;AAAA,IACnB,CAAC;AAAA,EACH;AACF;AAEA,IACE,EAAE,aAAa,OAAO,IAAI,aAAc,UAAW;AADrD,IAEE,cAAc;AAAA,EACZ,MAAM,OAAO,CAAC;AAAA,EACd,KAAM,OAAO,CAAC;AAAA,EACd,KAAM,OAAO,CAAC;AAChB;AANF,IAOE,QAAQ;AAAA,EACN,KAAO,OAAO,CAAC;AAAA,EACf,KAAO,OAAO,CAAC;AAAA,EACf,OAAO,OAAO,CAAC;AAAA,EACf,MAAO,OAAO,CAAC;AAAA,EACf,MAAO,OAAO,CAAC;AAAA,EACf,KAAO,OAAO,CAAC;AAAA,EACf,OAAO,OAAO,CAAC;AACjB;AAfF,IAgBE,gBAAgB,CAAC,QAAQ,QAAQ,QAAQ,UAAU,WAAW,WAAW,WAAW,OAAO,SAAS,SAAS,KAAK;AAhBpH,IAiBE,gBAAgB,EAAE,6BAAgC,YAAY,IAAI,YAAY,KAAK,aAAa,IAAI;AAjBtG,IAkBE,eAAe;AAlBjB,IAmBE,MAAM;AAAA,EACJ,QAAQ;AAAA,IACN,KAAY,IAAI,OAAQ,MAAM,KAAK,QAAQ,aAAc;AAAA,IACzD,OAAY,IAAI,SAAU,MAAM,KAAK,UAAU,aAAa;AAAA,IAC5D,YAAY,IAAI,cAAe,MAAM,OAAO,QAAU;AAAA,EACxD;AAAA,EACA,OAAO;AAAA,IACL,KAAY,IAAI,YAAa,MAAM,MAAM,QAAQ,KAAM;AAAA,IACvD,OAAY,IAAI,cAAe,MAAM,MAAM,UAAU,KAAK;AAAA,IAC1D,QAAY,IAAI,eAAgB,MAAM,OAAO,WAAW,cAAe;AAAA,IACvE,YAAY,IAAI,mBAAoB,MAAM,KAAK,UAAU,YAAa;AAAA,EACxE;AACF;AA/BF,IAgCE,aAAa;AAAA,EACX,MAAM,IAAI,iBAAiB,YAAY,CAAC,CAAC;AAAA,EACzC,KAAM,IAAI,iBAAiB,YAAY,CAAC,CAAC;AAAA,EACzC,KAAM,IAAI,iBAAiB,YAAY,CAAC,CAAC;AAC3C;AApCF,IAqCE,QAAQ;AAAA,EACN,MAAO,IAAI,iBAAiB,OAAO,CAAC,CAAC;AAAA,EACrC,KAAO,IAAI,WAAW,OAAO,CAAC,CAAC;AAAA,EAC/B,KAAO,IAAI,WAAW,OAAO,CAAC,CAAC;AAAA,EAC/B,OAAO,IAAI,WAAW,OAAO,CAAC,CAAC;AACjC;AAGF,IAAI,KAAK;AAAA,EACP,IAAc;AAAA,EACd;AAAA,EACA,YAAc;AAAA,IACZ,IAAI,cAAc;AAAA,MAChB,GAAG;AAAA,MACH,IAAe,YAAY;AAAA,MAC3B;AAAA,MACA,aAAe,CAAE,WAAW,GAAI;AAAA,MAChC,QAAe;AAAA,QACb,OAAa,MAAM;AAAA,QACnB,aAAa,MAAM;AAAA,MACrB;AAAA,MACA,aAAa,cAAc,IAAI;AAAA,IACjC,CAAC;AAAA,IACD,IAAI,cAAc;AAAA,MAChB,GAAG;AAAA,MACH,IAAe,YAAY;AAAA,MAC3B;AAAA,MACA,aAAe,CAAE,WAAW,GAAI;AAAA,MAChC,QAAe;AAAA,QACb,OAAa,MAAM;AAAA,QACnB,aAAa,MAAM;AAAA,MACrB;AAAA,MACA,aAAa,cAAc,IAAI;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EACA,IAAG;AAAA,IACD,MAAM,CAAC,EAAE,MAAM,WAAW,MAAK,4BAA4B,CAAC;AAAA,EAC9D;AAAA,EACA,iBAAiB;AAAA,IACf,aAAa,OAAO,OAAQ,UAAW;AAAA,IACvC,iBAAiB,CAAE,MAAM,KAAK,MAAM,KAAM;AAAA,IAC1C,MAAK;AAAA,MACH,YAAe;AAAA,QACb,OAAW,IAAI,OAAO,IAAI;AAAA,QAC1B,QAAW,IAAI,OAAO,IAAI;AAAA,QAC1B,WAAW,IAAI,OAAO,IAAI;AAAA,QAC1B,UAAW,IAAI,OAAO,IAAI;AAAA,QAC1B,OAAW,IAAI,MAAM,IAAI;AAAA,QACzB,SAAW,IAAI,MAAM,IAAI;AAAA,QACzB,UAAW,IAAI,MAAM,OAAO;AAAA,QAC5B,UAAW,IAAI,MAAM,IAAI;AAAA,MAC3B;AAAA,IACF;AAAA,IACA,YAA0B,CAAE,MAAM,GAAI;AAAA,IACtC,0BAA0B,CAAE,MAAM,IAAK;AAAA,IACvC,gBAA0B;AAAA,MACxB,QAAQ,CAAC;AAAA,MACT,MAAQ,CAAC;AAAA,MACT,MAAQ,CAAC;AAAA,IACX;AAAA,EACF;AAAA,EACA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOZ,IAAI,aAAa;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IACR,CAAC;AAAA,IACD,IAAI,cAAc;AAAA,MAChB,sBAAqB;AAAA,QACnB;AAAA,QACA,MAAU;AAAA,QACV,MAAU;AAAA,QACV,MAAU,yCAAyC,YAAY;AAAA,QAC/D;AAAA,MACF;AAAA,MACA,QAAQ,OAAO,OAAQ,MAAO;AAAA,IAChC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBH;AACF,CAAC;",
  "names": ["import_fs", "import_fs", "EPerfMarksFTPUpload", "EPerfMeasuresFTPUpload", "EAvailability", "EEventsQueueDBType", "EConnectorStatus", "import_events", "import_crypto", "EEvent", "crypto", "import_node_crypto", "crypto", "netConnect", "tlsConnect", "import_net", "net", "import_events", "import_crypto", "import_net", "import_fs", "connectorId", "import_fs"]
}
